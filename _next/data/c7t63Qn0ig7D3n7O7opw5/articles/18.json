{"pageProps":{"issue":{"body":"","bodyHTML":"","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/r7kamura/diary/issues/18/comments","created_at":"2022-05-23T20:17:50Z","events_url":"https://api.github.com/repos/r7kamura/diary/issues/18/events","html_url":"https://github.com/r7kamura/diary/issues/18","id":1245652571,"labels":[],"labels_url":"https://api.github.com/repos/r7kamura/diary/issues/18/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHTcevs5KPyZb","number":18,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/r7kamura/diary/issues/18/reactions"},"repository_url":"https://api.github.com/repos/r7kamura/diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/r7kamura/diary/issues/18/timeline","title":"2022-05-24","updated_at":"2022-05-23T20:17:50Z","url":"https://api.github.com/repos/r7kamura/diary/issues/18","user":{"avatar_url":"https://avatars.githubusercontent.com/u/111689?v=4","events_url":"https://api.github.com/users/r7kamura/events{/privacy}","followers_url":"https://api.github.com/users/r7kamura/followers","following_url":"https://api.github.com/users/r7kamura/following{/other_user}","gists_url":"https://api.github.com/users/r7kamura/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/r7kamura","id":111689,"login":"r7kamura","node_id":"MDQ6VXNlcjExMTY4OQ==","organizations_url":"https://api.github.com/users/r7kamura/orgs","received_events_url":"https://api.github.com/users/r7kamura/received_events","repos_url":"https://api.github.com/users/r7kamura/repos","site_admin":false,"starred_url":"https://api.github.com/users/r7kamura/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r7kamura/subscriptions","type":"User","url":"https://api.github.com/users/r7kamura"}},"issueComments":[{"body":"今日の俗世:\r\n\r\n- 3500万円返金\r\n- イーロンマスク エルデの王へ","bodyHTML":"<p>今日の俗世:</p>\n<ul>\n<li>3500万円返金</li>\n<li>イーロンマスク エルデの王へ</li>\n</ul>","author_association":"OWNER","created_at":"2022-05-23T20:17:54Z","html_url":"https://github.com/r7kamura/diary/issues/18#issuecomment-1135099317","id":1135099317,"issue_url":"https://api.github.com/repos/r7kamura/diary/issues/18","node_id":"IC_kwDOHTcevs5DqD21","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135099317/reactions"},"updated_at":"2022-05-23T20:17:54Z","url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135099317","user":{"avatar_url":"https://avatars.githubusercontent.com/u/111689?v=4","events_url":"https://api.github.com/users/r7kamura/events{/privacy}","followers_url":"https://api.github.com/users/r7kamura/followers","following_url":"https://api.github.com/users/r7kamura/following{/other_user}","gists_url":"https://api.github.com/users/r7kamura/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/r7kamura","id":111689,"login":"r7kamura","node_id":"MDQ6VXNlcjExMTY4OQ==","organizations_url":"https://api.github.com/users/r7kamura/orgs","received_events_url":"https://api.github.com/users/r7kamura/received_events","repos_url":"https://api.github.com/users/r7kamura/repos","site_admin":false,"starred_url":"https://api.github.com/users/r7kamura/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r7kamura/subscriptions","type":"User","url":"https://api.github.com/users/r7kamura"}},{"body":"[作業 with r7kamura #24 - YouTube](https://www.youtube.com/watch?v=X4sxEU3lFT8&ab_channel=r7kamura)","bodyHTML":"<p><a href=\"https://www.youtube.com/watch?v=X4sxEU3lFT8&#x26;ab_channel=r7kamura\">作業 with r7kamura #24 - YouTube</a></p>","author_association":"OWNER","created_at":"2022-05-23T20:35:24Z","html_url":"https://github.com/r7kamura/diary/issues/18#issuecomment-1135113699","id":1135113699,"issue_url":"https://api.github.com/repos/r7kamura/diary/issues/18","node_id":"IC_kwDOHTcevs5DqHXj","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135113699/reactions"},"updated_at":"2022-05-23T20:35:24Z","url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135113699","user":{"avatar_url":"https://avatars.githubusercontent.com/u/111689?v=4","events_url":"https://api.github.com/users/r7kamura/events{/privacy}","followers_url":"https://api.github.com/users/r7kamura/followers","following_url":"https://api.github.com/users/r7kamura/following{/other_user}","gists_url":"https://api.github.com/users/r7kamura/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/r7kamura","id":111689,"login":"r7kamura","node_id":"MDQ6VXNlcjExMTY4OQ==","organizations_url":"https://api.github.com/users/r7kamura/orgs","received_events_url":"https://api.github.com/users/r7kamura/received_events","repos_url":"https://api.github.com/users/r7kamura/repos","site_admin":false,"starred_url":"https://api.github.com/users/r7kamura/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r7kamura/subscriptions","type":"User","url":"https://api.github.com/users/r7kamura"}},{"body":"Sustainable Railsを読んでいく\r\n\r\n### logrageはtest環境で使う\r\n\r\ndevelopment環境以外でlogrageを有効化している。test環境ではlograge有効化してほしくないな。production環境みたいな絶対に機械的しか見ないような場所では良いと思う。\r\n\r\n### app以下にapp/models以外にドメインモデルの亜種を増やす\r\n\r\nビジネスロジックを書くときはそれ専用の app/services みたいなディレクトリを使うらしい。自分はディレクトリを増やすことには反対で、すべてのビジネスロジック用クラスはドメインモデルの亜種だと思うので、app/models以下に定義した方が良いと考えている派。autoloaderの厄介事も増えて複雑になるし、ディレクトリが増えれば増えるほど命名規則がブレるようになるし。ActiveRecordにロジックを盛り込むかどうかという議論はまた別の話。\r\n\r\n### ビジネスロジックを記述するクラスを細かく分ける\r\n\r\nビジネスロジックを書くときにクラスを細かく分けろという話がある。これには賛成。なぜなら、人はプログラムの大まかな構造を理解するときに、クラス間の関係性に着目して理解することが多いから。よく参照されているクラスに不具合があると、確認しなければいけない可能性のあるクラスが増える……という例が示されている。構造や関係性を表明するための手段としてクラスを細かく分ける。\r\n\r\n### 常にresource-fulなroutingを使うべき\r\n\r\n`resources :foos` と `get ...` とどっちを使うべきかという話について、後者を使うのは全くもって無益だとしている。そこまでか？でも、どちらにするかはともかく、どちらか片方に寄せるという姿勢は好ましいと思う。\r\n\r\n### Don’t Create Custom Actions, Create More Resources\r\n\r\n\"create more resources\"という表現は良い。\"コントローラーを分けた方がいい\"、とするよりもこっちのほうが納得感が出るかも?\r\n\r\n### Resources should never be nested more than 1 level deep\r\n\r\nという記述がガイドにあるのか。確かにこのルールが丁度良いと思う。\r\n\r\n### Bet you didn’t think routing was such a deep topic!\r\n\r\nわかる。ルーティングは超大事な部分だが、かなり軽視されていてつらくなりがち。\r\n\r\n### Ideally, Expose One Instance Variable Per Action\r\n\r\n可能なのか？そんなルールを掲げることが。\r\nコントローラーからテンプレートにインスタンス変数で値を渡すという仕組みはひどい仕組みだとは思っているので、まああんまり多用しない方が良いよなという意味では賛成寄りではあるが、1個にしよう、とかあえて言うべきことなのだろうか。コントローラーでmemoizeしててヘルパーから透過的に触ってるやつ、とかもあるしなあ。\r\n\r\n### Helpers are Best at Exposing Global UI State and Generating Markup\r\n\r\nヘルパーは、Railsの提供するやつのようなグローバルなタイプのヘルパーとしては上手く働くという話。\r\n\r\n### Just Use ERB\r\n\r\nそうだね。自分もERBの方が総合的には上手くいくと思っている。\r\n\r\nテンプレートエンジンに関する話題で言うと、自分の中では、erbcopとslimcopの存在が大きくて、これが無いとテンプレートエンジン中のRubyコードに対してRuboCopで自動置換が出来ない。hamlcopもつくろうとしてみたんだけど、hamlパーサーを書くのが大変で実用段階には至らなかった (誰か完成させてほしい)。話を戻すと、RuboCopと親和性が最も高いということが、自分の中でERBを推す理由の一つになっている。\r\n\r\n### Presenter\r\n\r\nPresenterの問題点: \r\n\r\n- 直接モデルにアクセスするか、Presenterを通してアクセスするか、2つの方法が生まれてしまう。2つの方法が生まれるとね3つめもどうせ生まれてしまう\r\n- Viewのコードを見ても、値がPresenterなのかただのModelなのか分からない\r\n\r\n…としていて、これには同意するところではあるが、でもそれってお前の言っているサービスクラスってやつについても言えるんじゃないか？\r\n\r\n### 変数の命名\r\n\r\n> I strongly recommend you name objects based on their actual class and do not pretend presenters are actually domain objects. For example, use @widget_presenter if the object is a WidgetPresenter, @widget if it’s a Widget.\r\n\r\nそれ。\r\n\r\nということはつまり、Foo::Barがあるとしたらbarという名前を使うべきという話だよな。ということは、Services::FooではなくServices::FooServiceとしなければならない。\r\n\r\nあと個人的に名前について言いたいことがあるとすると、現代はエディタが十分にまともなので、名前は十分に長くても構わないと思う。英単語以上の省略は絶対にするべきではないし (例: eventをeとするなど)、widget_idをidとすべきでもない。\r\n\r\n### テスト時間かかりすぎ問題\r\n\r\n> If tests are too brittle, duplicative, slow, or focused on the wrong things, the test suite will drag the team down.\r\n\r\n巷のRailsアプリは変なところにテスト書きすぎてて効率悪くなってる印象がある。ので引用した。悪いテストはチームの足を引っ張る。\r\n\r\n> The strategy I recommend is to have a system test for every major user flow, use unit tests to get coverage of anything else that is important, and closely monitor production for failures.\r\n\r\n\"major user flow\" の例として、ログインページが良い例、FAQページが良くない例だと言っている。つまり全部ではなく、本当にコアなところにだけsystem-specを書くべき。じゃあ本当にコアなところって何やねんって言うと…? 特に深掘りされてなかった。\r\n\r\nSystem Testについてもこう書けるよとしか紹介されてなくて、そのまま書き続けていくとマジで時間が掛かる遅いテストスイートが出来上がるぜ的なことは書かれていなかった。\r\n\r\n### HTMLのテストの小技\r\n\r\ndata-attributeにテストで検証する用の値 (IDとか) を埋め込んでおく小技が紹介されている。マジで小技だな…\r\n\r\n### ビジネスロジック\r\n\r\nもしRailsというものが無くて、普通のRubyのコードだったらどうする? 普通にクラスを書いて、普通にメソッドを定義して、普通に呼び出すよね？ Railsであってもそうすべき、と言っている。\r\n\r\n### サービスクラス\r\n\r\n```ruby\r\nFooCreator.new.create_foo(...)\r\n```\r\n\r\nと呼び出せるようなクラスが理想的だ、と言っている。\r\n\r\n一方、自分は次のようなものが理想的だと思っている。\r\n\r\n```ruby\r\nFooCreator.call(...)\r\n```\r\n\r\n本書的には、.call だと内部で一時的に状態を持ちたいときに使えなくて不便だと言っている。自分的には、それは内部実装次第で解決できることだと思っている。\r\n\r\n```ruby\r\nclass FooCreator\r\n  class << self\r\n    def call(...)\r\n      new(...).call\r\n    end\r\n  end\r\n\r\n  def initialize(...)\r\n    ...\r\n  end\r\n\r\n  def call\r\n    ...\r\n  end\r\nend\r\n```\r\n\r\nまた本書的には、本書のようにしないと2つ目のメソッドを足したくなったときに困り、引数を足すか別のクラスをつくらないといけなくて不便だと言っている。\r\n\r\n> Further, the command pattern makes it difficult or impossible to add a second method on the service class if that should later make sense. For example, if there comes a need for a second widget creation process, by following the guidelines I’ve laid out, you could conceivably make a new method on WidgetsCreator and share any needed logic privately and internally. If you’ve used the command pattern, you either need to pass some behavior-modifying flags to the constructor or make a new class and figure out how to share needed logic publicly. This is a more complex result that the command pattern more or less forces you into.\r\n\r\n自分的には、これは引数を足すか別のクラスをつくるべきだと思う。もしここで同じクラスに複数のメソッドを足していくべきだと言うのなら、1つのControllerにいろいろなActionを定義すべきでないという話と矛盾すると思っている。\r\n\r\nとはいえ、似ているが少し違うクラスが沢山あって好きに選んでくださいというパターンは、認知負荷が高まるとも思うので、一概に最高かというとそうでもないかもしれない。[ソフトウェア設計についてtwada技術顧問と話してみた 〜 A Philosophy of Software Design をベースに 〜 - NTT Communications Engineers' Blog](https://engineers.ntt.com/entry/2022/05/23/083118) の話が少し関連している。\r\n\r\n齟齬があるかもしれないが、本書は大クラス主義を推している一方、Railsのコントローラーについてだけは小クラス主義を推している、というところに矛盾を感じるのだろうか。そして、自分はサービスクラスについては小クラス主義を推している一方で、ActiveRecord::Baseを継承するようなモデルクラスでは「別に必要ならメソッド足しまくればええやん」ということを思っていて、矛盾している。こういう反論したい意見が出てきてこそ、読む価値のある本と言える。\r\n\r\n> Validations Are Awesome For User Experience\r\n\r\nValidationはデータの整合性を完璧に保つものではないから、UXのために使うべきだよとまとめている。いいまとめ方。ActiveRecordでのvalidationって、フロントエンドでのエラーチェックに似てるところがあるよね。\r\n\r\n> How to (Barely) Use Callbacks\r\n\r\nあんまり使うなと言っている。あるあるですな。自分の話だけど、既にコールバックが多用されてるRailsアプリから、コールバックを引き剥がしたいという要求が開発者から挙がるのを、10社ぐらいで見ている気がする。\r\n\r\n> Scopes are Often Business Logic and Belong Elsewhere\r\n\r\n3回書いたらscope化しろと言っている。ただあまり考察はなされていなくて、「普通にスコープをつくることもできるし、サービスクラスをつくってそこでスコープ的なこともできるよね。まあいろんなところで何度も使われるスコープっていうのはビジネスロジック色は薄くてデータ操作的だと言えるから、これはスコープで良いんじゃないか」と言っている。そういう温度感で良いのか？\r\n\r\n> Don’t Over-use Callbacks\r\n\r\nRailsのscaffoldが生成する `before_action :set_article` のようなcallbackが批判されていて、それはそのアクションの主たる部分だからアクションの中に置くべきだと言っている。これは自分的にも賛成。\r\n一方で、巷のRailsアプリだとbefore_actionで書いてほしいようなものをアクション内に記述していて分かりづらい (しアクション本体で処理を中断してレスポンスを返すとその事実がログに残らないのでデバッグしづらい) という問題があったりもするので、Don't Over-useと喧伝するのもどうかなと思う。本文中でもそう言っているけど、気を付けながら使おう、ぐらいの見出しが丁度良いと思う。\r\n\r\n> Queue Jobs Directly, and Have Them Defer to Your Business Logic Code\r\n\r\nActiveJobを使うと引数のシリアライズとかで悩まされるから、それは避けてSidekiqとかのAPIを直接叩けとのこと。マジか。何か過去にジョブ周りでミスって重大な損失を被った悲しい経験があるのか……?\r\n\r\n> Rake Tasks Should Not Contain Business Logic\r\n\r\nコントローラーやジョブと同じように、Rakeタスクもビジネスロジックを含めないべき (サービスクラスを呼ぶなどしろ) としている。これには同意。直接ビジネスロジックが書かれているRakeタスクとかどうせテストも禄にされてないしな。","bodyHTML":"<p>Sustainable Railsを読んでいく</p>\n<h3>logrageはtest環境で使う</h3>\n<p>development環境以外でlogrageを有効化している。test環境ではlograge有効化してほしくないな。production環境みたいな絶対に機械的しか見ないような場所では良いと思う。</p>\n<h3>app以下にapp/models以外にドメインモデルの亜種を増やす</h3>\n<p>ビジネスロジックを書くときはそれ専用の app/services みたいなディレクトリを使うらしい。自分はディレクトリを増やすことには反対で、すべてのビジネスロジック用クラスはドメインモデルの亜種だと思うので、app/models以下に定義した方が良いと考えている派。autoloaderの厄介事も増えて複雑になるし、ディレクトリが増えれば増えるほど命名規則がブレるようになるし。ActiveRecordにロジックを盛り込むかどうかという議論はまた別の話。</p>\n<h3>ビジネスロジックを記述するクラスを細かく分ける</h3>\n<p>ビジネスロジックを書くときにクラスを細かく分けろという話がある。これには賛成。なぜなら、人はプログラムの大まかな構造を理解するときに、クラス間の関係性に着目して理解することが多いから。よく参照されているクラスに不具合があると、確認しなければいけない可能性のあるクラスが増える……という例が示されている。構造や関係性を表明するための手段としてクラスを細かく分ける。</p>\n<h3>常にresource-fulなroutingを使うべき</h3>\n<p><code>resources :foos</code> と <code>get ...</code> とどっちを使うべきかという話について、後者を使うのは全くもって無益だとしている。そこまでか？でも、どちらにするかはともかく、どちらか片方に寄せるという姿勢は好ましいと思う。</p>\n<h3>Don’t Create Custom Actions, Create More Resources</h3>\n<p>\"create more resources\"という表現は良い。\"コントローラーを分けた方がいい\"、とするよりもこっちのほうが納得感が出るかも?</p>\n<h3>Resources should never be nested more than 1 level deep</h3>\n<p>という記述がガイドにあるのか。確かにこのルールが丁度良いと思う。</p>\n<h3>Bet you didn’t think routing was such a deep topic!</h3>\n<p>わかる。ルーティングは超大事な部分だが、かなり軽視されていてつらくなりがち。</p>\n<h3>Ideally, Expose One Instance Variable Per Action</h3>\n<p>可能なのか？そんなルールを掲げることが。\r\nコントローラーからテンプレートにインスタンス変数で値を渡すという仕組みはひどい仕組みだとは思っているので、まああんまり多用しない方が良いよなという意味では賛成寄りではあるが、1個にしよう、とかあえて言うべきことなのだろうか。コントローラーでmemoizeしててヘルパーから透過的に触ってるやつ、とかもあるしなあ。</p>\n<h3>Helpers are Best at Exposing Global UI State and Generating Markup</h3>\n<p>ヘルパーは、Railsの提供するやつのようなグローバルなタイプのヘルパーとしては上手く働くという話。</p>\n<h3>Just Use ERB</h3>\n<p>そうだね。自分もERBの方が総合的には上手くいくと思っている。</p>\n<p>テンプレートエンジンに関する話題で言うと、自分の中では、erbcopとslimcopの存在が大きくて、これが無いとテンプレートエンジン中のRubyコードに対してRuboCopで自動置換が出来ない。hamlcopもつくろうとしてみたんだけど、hamlパーサーを書くのが大変で実用段階には至らなかった (誰か完成させてほしい)。話を戻すと、RuboCopと親和性が最も高いということが、自分の中でERBを推す理由の一つになっている。</p>\n<h3>Presenter</h3>\n<p>Presenterの問題点:</p>\n<ul>\n<li>直接モデルにアクセスするか、Presenterを通してアクセスするか、2つの方法が生まれてしまう。2つの方法が生まれるとね3つめもどうせ生まれてしまう</li>\n<li>Viewのコードを見ても、値がPresenterなのかただのModelなのか分からない</li>\n</ul>\n<p>…としていて、これには同意するところではあるが、でもそれってお前の言っているサービスクラスってやつについても言えるんじゃないか？</p>\n<h3>変数の命名</h3>\n<blockquote>\n<p>I strongly recommend you name objects based on their actual class and do not pretend presenters are actually domain objects. For example, use @widget_presenter if the object is a WidgetPresenter, <a href=\"https://github.com/widget\"><strong>@widget</strong></a> if it’s a Widget.</p>\n</blockquote>\n<p>それ。</p>\n<p>ということはつまり、Foo::Barがあるとしたらbarという名前を使うべきという話だよな。ということは、Services::FooではなくServices::FooServiceとしなければならない。</p>\n<p>あと個人的に名前について言いたいことがあるとすると、現代はエディタが十分にまともなので、名前は十分に長くても構わないと思う。英単語以上の省略は絶対にするべきではないし (例: eventをeとするなど)、widget_idをidとすべきでもない。</p>\n<h3>テスト時間かかりすぎ問題</h3>\n<blockquote>\n<p>If tests are too brittle, duplicative, slow, or focused on the wrong things, the test suite will drag the team down.</p>\n</blockquote>\n<p>巷のRailsアプリは変なところにテスト書きすぎてて効率悪くなってる印象がある。ので引用した。悪いテストはチームの足を引っ張る。</p>\n<blockquote>\n<p>The strategy I recommend is to have a system test for every major user flow, use unit tests to get coverage of anything else that is important, and closely monitor production for failures.</p>\n</blockquote>\n<p>\"major user flow\" の例として、ログインページが良い例、FAQページが良くない例だと言っている。つまり全部ではなく、本当にコアなところにだけsystem-specを書くべき。じゃあ本当にコアなところって何やねんって言うと…? 特に深掘りされてなかった。</p>\n<p>System Testについてもこう書けるよとしか紹介されてなくて、そのまま書き続けていくとマジで時間が掛かる遅いテストスイートが出来上がるぜ的なことは書かれていなかった。</p>\n<h3>HTMLのテストの小技</h3>\n<p>data-attributeにテストで検証する用の値 (IDとか) を埋め込んでおく小技が紹介されている。マジで小技だな…</p>\n<h3>ビジネスロジック</h3>\n<p>もしRailsというものが無くて、普通のRubyのコードだったらどうする? 普通にクラスを書いて、普通にメソッドを定義して、普通に呼び出すよね？ Railsであってもそうすべき、と言っている。</p>\n<h3>サービスクラス</h3>\n<pre><code class=\"language-ruby\">FooCreator.new.create_foo(...)\n</code></pre>\n<p>と呼び出せるようなクラスが理想的だ、と言っている。</p>\n<p>一方、自分は次のようなものが理想的だと思っている。</p>\n<pre><code class=\"language-ruby\">FooCreator.call(...)\n</code></pre>\n<p>本書的には、.call だと内部で一時的に状態を持ちたいときに使えなくて不便だと言っている。自分的には、それは内部実装次第で解決できることだと思っている。</p>\n<pre><code class=\"language-ruby\">class FooCreator\r\n  class &#x3C;&#x3C; self\r\n    def call(...)\r\n      new(...).call\r\n    end\r\n  end\r\n\r\n  def initialize(...)\r\n    ...\r\n  end\r\n\r\n  def call\r\n    ...\r\n  end\r\nend\n</code></pre>\n<p>また本書的には、本書のようにしないと2つ目のメソッドを足したくなったときに困り、引数を足すか別のクラスをつくらないといけなくて不便だと言っている。</p>\n<blockquote>\n<p>Further, the command pattern makes it difficult or impossible to add a second method on the service class if that should later make sense. For example, if there comes a need for a second widget creation process, by following the guidelines I’ve laid out, you could conceivably make a new method on WidgetsCreator and share any needed logic privately and internally. If you’ve used the command pattern, you either need to pass some behavior-modifying flags to the constructor or make a new class and figure out how to share needed logic publicly. This is a more complex result that the command pattern more or less forces you into.</p>\n</blockquote>\n<p>自分的には、これは引数を足すか別のクラスをつくるべきだと思う。もしここで同じクラスに複数のメソッドを足していくべきだと言うのなら、1つのControllerにいろいろなActionを定義すべきでないという話と矛盾すると思っている。</p>\n<p>とはいえ、似ているが少し違うクラスが沢山あって好きに選んでくださいというパターンは、認知負荷が高まるとも思うので、一概に最高かというとそうでもないかもしれない。<a href=\"https://engineers.ntt.com/entry/2022/05/23/083118\">ソフトウェア設計についてtwada技術顧問と話してみた 〜 A Philosophy of Software Design をベースに 〜 - NTT Communications Engineers' Blog</a> の話が少し関連している。</p>\n<p>齟齬があるかもしれないが、本書は大クラス主義を推している一方、Railsのコントローラーについてだけは小クラス主義を推している、というところに矛盾を感じるのだろうか。そして、自分はサービスクラスについては小クラス主義を推している一方で、ActiveRecord::Baseを継承するようなモデルクラスでは「別に必要ならメソッド足しまくればええやん」ということを思っていて、矛盾している。こういう反論したい意見が出てきてこそ、読む価値のある本と言える。</p>\n<blockquote>\n<p>Validations Are Awesome For User Experience</p>\n</blockquote>\n<p>Validationはデータの整合性を完璧に保つものではないから、UXのために使うべきだよとまとめている。いいまとめ方。ActiveRecordでのvalidationって、フロントエンドでのエラーチェックに似てるところがあるよね。</p>\n<blockquote>\n<p>How to (Barely) Use Callbacks</p>\n</blockquote>\n<p>あんまり使うなと言っている。あるあるですな。自分の話だけど、既にコールバックが多用されてるRailsアプリから、コールバックを引き剥がしたいという要求が開発者から挙がるのを、10社ぐらいで見ている気がする。</p>\n<blockquote>\n<p>Scopes are Often Business Logic and Belong Elsewhere</p>\n</blockquote>\n<p>3回書いたらscope化しろと言っている。ただあまり考察はなされていなくて、「普通にスコープをつくることもできるし、サービスクラスをつくってそこでスコープ的なこともできるよね。まあいろんなところで何度も使われるスコープっていうのはビジネスロジック色は薄くてデータ操作的だと言えるから、これはスコープで良いんじゃないか」と言っている。そういう温度感で良いのか？</p>\n<blockquote>\n<p>Don’t Over-use Callbacks</p>\n</blockquote>\n<p>Railsのscaffoldが生成する <code>before_action :set_article</code> のようなcallbackが批判されていて、それはそのアクションの主たる部分だからアクションの中に置くべきだと言っている。これは自分的にも賛成。\r\n一方で、巷のRailsアプリだとbefore_actionで書いてほしいようなものをアクション内に記述していて分かりづらい (しアクション本体で処理を中断してレスポンスを返すとその事実がログに残らないのでデバッグしづらい) という問題があったりもするので、Don't Over-useと喧伝するのもどうかなと思う。本文中でもそう言っているけど、気を付けながら使おう、ぐらいの見出しが丁度良いと思う。</p>\n<blockquote>\n<p>Queue Jobs Directly, and Have Them Defer to Your Business Logic Code</p>\n</blockquote>\n<p>ActiveJobを使うと引数のシリアライズとかで悩まされるから、それは避けてSidekiqとかのAPIを直接叩けとのこと。マジか。何か過去にジョブ周りでミスって重大な損失を被った悲しい経験があるのか……?</p>\n<blockquote>\n<p>Rake Tasks Should Not Contain Business Logic</p>\n</blockquote>\n<p>コントローラーやジョブと同じように、Rakeタスクもビジネスロジックを含めないべき (サービスクラスを呼ぶなどしろ) としている。これには同意。直接ビジネスロジックが書かれているRakeタスクとかどうせテストも禄にされてないしな。</p>","author_association":"OWNER","created_at":"2022-05-23T20:49:19Z","html_url":"https://github.com/r7kamura/diary/issues/18#issuecomment-1135124703","id":1135124703,"issue_url":"https://api.github.com/repos/r7kamura/diary/issues/18","node_id":"IC_kwDOHTcevs5DqKDf","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135124703/reactions"},"updated_at":"2022-05-24T01:06:12Z","url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135124703","user":{"avatar_url":"https://avatars.githubusercontent.com/u/111689?v=4","events_url":"https://api.github.com/users/r7kamura/events{/privacy}","followers_url":"https://api.github.com/users/r7kamura/followers","following_url":"https://api.github.com/users/r7kamura/following{/other_user}","gists_url":"https://api.github.com/users/r7kamura/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/r7kamura","id":111689,"login":"r7kamura","node_id":"MDQ6VXNlcjExMTY4OQ==","organizations_url":"https://api.github.com/users/r7kamura/orgs","received_events_url":"https://api.github.com/users/r7kamura/received_events","repos_url":"https://api.github.com/users/r7kamura/repos","site_admin":false,"starred_url":"https://api.github.com/users/r7kamura/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r7kamura/subscriptions","type":"User","url":"https://api.github.com/users/r7kamura"}},{"body":"A Philosophy of Software Designは読んでみたいところ。","bodyHTML":"<p>A Philosophy of Software Designは読んでみたいところ。</p>","author_association":"OWNER","created_at":"2022-05-23T22:49:52Z","html_url":"https://github.com/r7kamura/diary/issues/18#issuecomment-1135210715","id":1135210715,"issue_url":"https://api.github.com/repos/r7kamura/diary/issues/18","node_id":"IC_kwDOHTcevs5DqfDb","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135210715/reactions"},"updated_at":"2022-05-23T22:49:52Z","url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135210715","user":{"avatar_url":"https://avatars.githubusercontent.com/u/111689?v=4","events_url":"https://api.github.com/users/r7kamura/events{/privacy}","followers_url":"https://api.github.com/users/r7kamura/followers","following_url":"https://api.github.com/users/r7kamura/following{/other_user}","gists_url":"https://api.github.com/users/r7kamura/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/r7kamura","id":111689,"login":"r7kamura","node_id":"MDQ6VXNlcjExMTY4OQ==","organizations_url":"https://api.github.com/users/r7kamura/orgs","received_events_url":"https://api.github.com/users/r7kamura/received_events","repos_url":"https://api.github.com/users/r7kamura/repos","site_admin":false,"starred_url":"https://api.github.com/users/r7kamura/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r7kamura/subscriptions","type":"User","url":"https://api.github.com/users/r7kamura"}},{"body":"Sustainable Web Development with Ruby on Railsを読み終えた。後半はなんかこう言及すべきトピックがあまり無かったのでざーっと読み流した。","bodyHTML":"<p>Sustainable Web Development with Ruby on Railsを読み終えた。後半はなんかこう言及すべきトピックがあまり無かったのでざーっと読み流した。</p>","author_association":"OWNER","created_at":"2022-05-24T00:01:18Z","html_url":"https://github.com/r7kamura/diary/issues/18#issuecomment-1135255013","id":1135255013,"issue_url":"https://api.github.com/repos/r7kamura/diary/issues/18","node_id":"IC_kwDOHTcevs5Dqp3l","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135255013/reactions"},"updated_at":"2022-05-24T00:01:18Z","url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135255013","user":{"avatar_url":"https://avatars.githubusercontent.com/u/111689?v=4","events_url":"https://api.github.com/users/r7kamura/events{/privacy}","followers_url":"https://api.github.com/users/r7kamura/followers","following_url":"https://api.github.com/users/r7kamura/following{/other_user}","gists_url":"https://api.github.com/users/r7kamura/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/r7kamura","id":111689,"login":"r7kamura","node_id":"MDQ6VXNlcjExMTY4OQ==","organizations_url":"https://api.github.com/users/r7kamura/orgs","received_events_url":"https://api.github.com/users/r7kamura/received_events","repos_url":"https://api.github.com/users/r7kamura/repos","site_admin":false,"starred_url":"https://api.github.com/users/r7kamura/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r7kamura/subscriptions","type":"User","url":"https://api.github.com/users/r7kamura"}},{"body":"同作者のもの:\r\n\r\n- [Brutalist Web Design](https://brutalist-web.design/)\r\n- [ウェブデザインの本質に主眼を置いたデザインガイドライン「ブルータリスト・ウェブ・デザイン」 - GIGAZINE](https://gigazine.net/news/20180710-brutalist-web-design/)","bodyHTML":"<p>同作者のもの:</p>\n<ul>\n<li><a href=\"https://brutalist-web.design/\">Brutalist Web Design</a></li>\n<li><a href=\"https://gigazine.net/news/20180710-brutalist-web-design/\">ウェブデザインの本質に主眼を置いたデザインガイドライン「ブルータリスト・ウェブ・デザイン」 - GIGAZINE</a></li>\n</ul>","author_association":"OWNER","created_at":"2022-05-24T02:19:29Z","html_url":"https://github.com/r7kamura/diary/issues/18#issuecomment-1135326549","id":1135326549,"issue_url":"https://api.github.com/repos/r7kamura/diary/issues/18","node_id":"IC_kwDOHTcevs5Dq7VV","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135326549/reactions"},"updated_at":"2022-05-24T02:19:29Z","url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135326549","user":{"avatar_url":"https://avatars.githubusercontent.com/u/111689?v=4","events_url":"https://api.github.com/users/r7kamura/events{/privacy}","followers_url":"https://api.github.com/users/r7kamura/followers","following_url":"https://api.github.com/users/r7kamura/following{/other_user}","gists_url":"https://api.github.com/users/r7kamura/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/r7kamura","id":111689,"login":"r7kamura","node_id":"MDQ6VXNlcjExMTY4OQ==","organizations_url":"https://api.github.com/users/r7kamura/orgs","received_events_url":"https://api.github.com/users/r7kamura/received_events","repos_url":"https://api.github.com/users/r7kamura/repos","site_admin":false,"starred_url":"https://api.github.com/users/r7kamura/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r7kamura/subscriptions","type":"User","url":"https://api.github.com/users/r7kamura"}},{"body":"書いた: [山崎実業のスポンジホルダー](https://r7kamura.com/articles/2022-05-24-yamazaki-no-1)","bodyHTML":"<p>書いた: <a href=\"https://r7kamura.com/articles/2022-05-24-yamazaki-no-1\">山崎実業のスポンジホルダー</a></p>","author_association":"OWNER","created_at":"2022-05-24T06:10:24Z","html_url":"https://github.com/r7kamura/diary/issues/18#issuecomment-1135450990","id":1135450990,"issue_url":"https://api.github.com/repos/r7kamura/diary/issues/18","node_id":"IC_kwDOHTcevs5DrZtu","performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135450990/reactions"},"updated_at":"2022-05-24T06:10:24Z","url":"https://api.github.com/repos/r7kamura/diary/issues/comments/1135450990","user":{"avatar_url":"https://avatars.githubusercontent.com/u/111689?v=4","events_url":"https://api.github.com/users/r7kamura/events{/privacy}","followers_url":"https://api.github.com/users/r7kamura/followers","following_url":"https://api.github.com/users/r7kamura/following{/other_user}","gists_url":"https://api.github.com/users/r7kamura/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/r7kamura","id":111689,"login":"r7kamura","node_id":"MDQ6VXNlcjExMTY4OQ==","organizations_url":"https://api.github.com/users/r7kamura/orgs","received_events_url":"https://api.github.com/users/r7kamura/received_events","repos_url":"https://api.github.com/users/r7kamura/repos","site_admin":false,"starred_url":"https://api.github.com/users/r7kamura/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r7kamura/subscriptions","type":"User","url":"https://api.github.com/users/r7kamura"}}]},"__N_SSG":true}