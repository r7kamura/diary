<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[r7kamura/diary]]></title><description><![CDATA[r7kamura's daily working log.]]></description><link>https://r7kamura.github.io/diary/</link><generator>r7kamura/diary</generator><lastBuildDate>Mon, 25 Jul 2022 01:35:17 GMT</lastBuildDate><atom:link href="https://r7kamura.github.io/diary/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[2022-07-24]]></title><description><![CDATA[r7kamura's working log on 2022-07-24]]></description><link>https://r7kamura.github.io/diary/articles/80</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/80</guid><pubDate>Sat, 23 Jul 2022 21:18:27 GMT</pubDate><content:encoded><![CDATA[<p>今回はvscode-rubyの読書メモを書き連ねていきます。</p><hr><p>vscode-rubyは、複数のパッケージを扱うmonorepoとして管理されている。</p>
<ul>
<li>vscode-ruby</li>
<li>vscode-ruby-client</li>
<li>vscode-ruby-debugger</li>
<li>language-server-ruby</li>
</ul>
<p>monorepoの管理にはLernaを使っているとのこと。</p><hr><p>language-server-rubyについて詳しく見ていく。</p>
<p>package.jsonを見ると、次のパッケージがdependenciesに含まれていた。</p>
<ul>
<li>web-tree-sitter</li>
<li>web-tree-sitter-ruby</li>
</ul>
<p>web- prefix付きなのが気になるが、確かにtree-sitterが使われている。</p>
<p>package.jsonのmainフィールドにdist/index.jsとあり、npm run buildではesbuild.jsが利用されている。</p>
<p>esbuild.jsの中では、web-tree-sitter-ruby/tree-sitter-ruby.wasmが参照されている。
なるほど、WASM形式でビルドされてNode.js等で使えるように配布されているのがweb-tree-sitterなのかな。
ちなみにtree-sitterはRustで実装されている。</p><hr><ul>
<li><a href="https://github.com/rubyide/vscode-ruby">https://github.com/rubyide/vscode-ruby</a></li>
<li><a href="https://github.com/tree-sitter/tree-sitter">https://github.com/tree-sitter/tree-sitter</a></li>
<li><a href="https://github.com/tree-sitter/tree-sitter-ruby">https://github.com/tree-sitter/tree-sitter-ruby</a></li>
</ul><hr><p>language-server-rubyのesbuild.jsを見ると、次の二つのことをやっているのが分かる。</p>
<ul>
<li>tree-sitter{,-ruby}.wasmをコピーして、distディレクトリに入れる</li>
<li>src/inedx.tsをビルドして、distディレクトリに入れる</li>
</ul>
<p>language-server-rubyのエントリポイントがsrc/index.jsであることが分かったので、ここを読み進めていく。</p><hr><p>手元に環境にnodenvが入っているので、vscode-rubyのリポジトリのルートディレクトリで次のコマンドを実行するだけで環境構築を完了させられた。</p>
<pre><code>nodenv install
npm install
</code></pre>
<p>これをやらないと、VSCodeが怒ってくる。</p>
<p><img src="https://user-images.githubusercontent.com/111689/180624816-964a6b5b-a25a-44e5-bc95-26d8ea1b648f.png" alt="image"></p><hr><p>esbuildを使うのは初めてだけど、こういう感じで使うんだなあ。</p>
<p><code>esbuild</code> というexecutableを実行するわけではなく、</p>
<pre><code>node esbuild.js
</code></pre>
<p>と実行するというのが面白い。普通だったらオプションとかを渡したくなってCLIオプションを付けるためにCLIを用意するものだけど、esbuildの場合はどうせ設定ファイルを用意することになるので、そういうものを用意する必要は無いわという判断なのだろうか。まあ無くて良いなら無いに越したことはない。</p><hr><pre><code class="language-javascript">// Don't die when attempting to pipe stdin to a bad spawn
// https://github.com/electron/electron/issues/13254
process.on('SIGPIPE', () => {
	log.error('SIGPIPE received');
});
</code></pre>
<p>とあり、そういえばVS CodeはElectronベースだから、Electronの不具合の影響を受けるんだったと思い出した。</p><hr><p>基本のlanguage serverの実装はこういう感じのようだ。</p>
<pre><code class="language-javascript">import { createConnection, ProposedFeatures } from "vscode-languageserver";
cosnt connection = createConnection(ProposedFeatures.all);
// Customize connection as you like...
connection.listen();
</code></pre><hr><pre><code class="language-javascript">let server;
connection.onInitialize(async (params) => {
  server = new Server(connection, params);
  server.initialize();
  return server.capabilities;
});
</code></pre>
<p>こんな感じのコードが書かれているから、実際には <code>Server</code> という内部実装の中でいろいろな処理をやっている。</p>
<p>なので、読むべきは次の実装:</p>
<ul>
<li>Serverのconstructor</li>
<li>Server#initialize</li>
</ul>
<p>capabilitiesというのは、「このlanguage serevrはDocumentHighlightに対応ています」のような情報を明示するためのオブジェクトらしい。</p>
<ul>
<li><a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features">https://code.visualstudio.com/api/language-extensions/programmatic-language-features</a></li>
</ul><hr><p>language-server-rubyでは、VS Codeの拡張として提供する各機能の単位を "Provider" と呼称しているようだ。VS Codeの用語なのか独自用語なのかはわからない。</p>
<p>language-server-rubyでは、次の6つのProviderを用意しているようだ。</p>
<ul>
<li>FoldingRangeProvider</li>
<li>DocumentHighlightProvider</li>
<li>DocumentSymbolProvider</li>
<li>DocumentFormattingProvider</li>
<li>ConfigurationProvider</li>
<li>WorkspaceProvider</li>
</ul>
<p>前者4つは初期化フェーズ中に用意され、後者2つは初期化フェーズ完了後に用意される。connection.onInitializeとconnection.onInitialize<strong>d</strong>でそれぞれ用意されている。</p>
<ul>
<li>Server#initialize</li>
<li>Server#setup</li>
</ul>
<p>でそれぞれ実装されているが、このネーミングは少し分かりづらい…</p>
<ul>
<li>Server#onConnectionInitialize</li>
<li>Server#onConnectionInitialized</li>
</ul>
<p>とかで良かっただろうと思う。</p>
<p>その話はさておき、Server.tsの主な仕事はこのようにProviderを用意してあげることらしく、主な実装はつまりそれぞれのProviderに書かれているに違いない。</p>
<p>Providerは、初期化時にconnectionを受け取って、何か良い感じに動くもののようだということが分かっている。</p><hr><p>各種Providerは基底Providerクラスを継承しているらしい。
各種Providerは .registerというstatic methodを持っていて、外部向けのインターフェースがこれ</p><hr><p>Connection#onDocumentHighlight という、コールバック登録用のメソッドが生えているらしいDocumentHighlightProviderはこれをそのconstructorで呼び出している。ググってもonDocumentHighlightに関する情報は乏しい……</p>
<p>onDocumentHighlightに渡す引数はServerRequestHandler型で、実際のコード例を見ると、TextDocumentPositionParams型の引数を取るらしい。位置情報が与えられるので、それに応じて何か適切に動作しろということだろうか。<code>Promise&#x3C;DocumentHighlight[]></code> 型の値を返す関数として実装されている。</p>
<p>paramsはpositionとuriを持つObjectらしい。多分ファイルパスとその中での位置情報が入っている。</p>
<p>DocumentHighlightAnalyzer.analyze にこれらの値を渡してその返り値をそのまま返している。役割分担を整理するとこうだ:</p>
<ul>
<li>Provider
<ul>
<li>Connection#onDocumentHighlight のことを知っている</li>
<li>適切なハンドラー関数を用意してあげる責務を持つ</li>
</ul>
</li>
<li>Analyzer
<ul>
<li>Connectionについては詳しいことは知らない</li>
<li>コードの位置情報とファイルパスをもらって解析を行うだけ</li>
</ul>
</li>
</ul><hr><p>DocumentHighlightAnalyzerでは、tree-sitterを利用した構文の解析と、<code>DocumentHighlight[]</code> の生成をやっている。どういう機能を持っているかというと、多分こんな感じ:</p>
<ul>
<li>endにカーソルを載せているときは、対応するbeginやdoからendまでをハイライトする</li>
<li>beginやdoにカーソルを載せているときは、そこから対応するendまでをハイライトする</li>
</ul>
<p>tree-sitter-rubyの生成する構文木の実例を見ながら進めていった方が分かりやすいかもしれない。</p>
<p>vscodeの "document highlight" という機能・概念を正確にするため、ぐぐってみた方が良さげ。</p>
<blockquote>
<p>A document highlight is a range inside a text document which deserves special attention. Usually a document highlight is visualized by changing the background color of its range.</p>
</blockquote>
<ul>
<li><a href="https://vshaxe.github.io/vscode-extern/vscode/DocumentHighlight.html">https://vshaxe.github.io/vscode-extern/vscode/DocumentHighlight.html</a></li>
</ul>
<p><img src="https://user-images.githubusercontent.com/111689/180629880-49960fae-d5b1-4e47-8978-4e66791d37bd.png" alt="image"></p>
<p>いろいろ調べていると、次のような言及があった。</p>
<blockquote>
<p>textDocument/documentHighlightは、同じシンボルの使用箇所をエディタ上でハイライトする場合にも使用できます。</p>
</blockquote>
<ul>
<li><a href="https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4">https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4</a></li>
</ul>
<p><img src="https://user-images.githubusercontent.com/111689/180630105-73de7a93-c83b-4004-abda-4a95db868978.png" alt="image"></p><hr><p><img src="https://user-images.githubusercontent.com/111689/180648140-a095e438-519d-43c1-9028-7b29296b3fa0.png" alt="image"></p>
<p>この機能だな。endにカーソルが載っている状態だと、そのendと対応するdoの背景色が変わっている。</p>
<p>if elsif else end や case when end, begin rescue else ensure end のときは全部光ってほしいな。少し改良してみる。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-22]]></title><description><![CDATA[r7kamura's working log on 2022-07-22]]></description><link>https://r7kamura.github.io/diary/articles/78</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/78</guid><pubDate>Thu, 21 Jul 2022 21:50:04 GMT</pubDate><content:encoded><![CDATA[<hr><p>editabroにmonaco-markdownを導入するprをもらったので、monaco-markdownのソースコードを一通り読んでいる</p><hr><p>editabroのCIを改善して、リリースノート自動生成機能を有効化し (ノート生成だけまだ実験的なので手動でやっていた)、あと提出用のzipの自動生成とリリースへの紐づけも行うようにした。</p>
<p>どうやらChrome Web Storeへの提出も自動でやってくれるactionがあるらしいが、なんか怖いのと説明文を提出のついでに直したりする工程がいま存在しているので、ここの自動化は未着手。</p><hr><p>r7kamura/workflowsに、chrome拡張のリリース用workflowを足した。</p><hr><p>WindowsでもMagic Trackpadが動いたので最高。</p><hr><p>MV7をしばらく試した感想:</p>
<ul>
<li>ダイナミックマイクを使うと、ほとんどの音が耳元で鳴っているかのように聴こえる</li>
<li>打鍵音をダイナミックでマイクを入れてもあまり心地良くない
<ul>
<li>耳元で打鍵されると鬱陶しいから</li>
</ul>
</li>
<li>ひとり語りの音声だけ撮りたい場合はダイナミックマイクの方が音質が相当いい</li>
</ul>
<p>試していない仮説:</p>
<ul>
<li>コンデンサマイクをゲインを下げて口元で使えばそれでいいのでは説</li>
</ul>]]></content:encoded></item><item><title><![CDATA[2022-07-20]]></title><description><![CDATA[r7kamura's working log on 2022-07-20]]></description><link>https://r7kamura.github.io/diary/articles/76</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/76</guid><pubDate>Tue, 19 Jul 2022 21:07:02 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=CH0rAOmT938&#x26;ab_channel=r7kamura">作業 with r7kamura #81 - YouTube</a></p><hr><p>gh-pr-releaseをリリースノート生成APIで代替できないか色々実験したものの、上手くいかなかった。</p><hr><p>YouTubeのコメント読み上げおばけというchrome拡張、YouTubeを英語のUIにすると英語で読み上げるんだな……</p><hr><p>rubocop-railsにprを出したが、果たして</p>
<ul>
<li><a href="https://togithub.com/rubocop/rubocop-rails/pull/747">https://togithub.com/rubocop/rubocop-rails/pull/747</a></li>
</ul>]]></content:encoded></item><item><title><![CDATA[2022-07-19]]></title><description><![CDATA[r7kamura's working log on 2022-07-19]]></description><link>https://r7kamura.github.io/diary/articles/75</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/75</guid><pubDate>Mon, 18 Jul 2022 21:02:49 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=Y-DN_nGx3wk">作業 with r7kamura #80 - YouTube</a></p><hr><p><a href="https://www.youtube.com/watch?v=B5wdRcv-zQA">ASMR Coding: Chrome extension in 20 min (subtitle commentary available) - YouTube</a>
これを公開した。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-18]]></title><description><![CDATA[r7kamura's working log on 2022-07-18]]></description><link>https://r7kamura.github.io/diary/articles/74</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/74</guid><pubDate>Sun, 17 Jul 2022 21:04:22 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=Jq3aA-WH4Wo">作業 with r7kamura #79 - YouTube</a></p><hr><p>github-label-sync-actionという仕組みをつくって実運用に載せたら\Goodという話を記事にまとめておきたい。</p><hr><p><img src="https://user-images.githubusercontent.com/111689/179433107-b8dc65dc-7919-4dbf-9b94-77d5d454ac23.png" alt="image"></p>
<p><img src="https://user-images.githubusercontent.com/111689/179433173-a7138779-c479-426b-9885-c1378cfda08a.png" alt="image"></p>
<p>ほとんどの人が黒色買ってて、やっぱり黒色の方が見た目がいい気がする。キーボードが黒色だから対比としてグレーの方がいいかなと思ったけど、これ見ると黒色の方が良さそうに見える。この人は机の天板が黒色だから対比となるようグレーにしたと仰っていて、それは納得できる理由。</p>
<p>引用元:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=rs8RSewaLjQ">https://www.youtube.com/watch?v=rs8RSewaLjQ</a></li>
<li><a href="https://www.youtube.com/watch?v=6VD9kFY4Abk">https://www.youtube.com/watch?v=6VD9kFY4Abk</a></li>
</ul>
<p>Amazon.co.jpで調べた限りだと、やはり高いけど有名なGrovemadeのblack mediumか、日本のメーカーがつくっている4800円のやつが良さそうに思った。Grovemadeは公式で90ドルだけど、12400円+送料 (+関税?) になる。Amazonだと19800円で取り扱っている。いずれもAmazonでは公式で売っているわけではなくて、マーケットプレイス経由。</p>
<p>800円ぐらいのものも売られているが、品質が怪しい、サイズがなぜか適切なやつが無い、到着が数週間後になるなどのものが多い。恐らく中国製ということだろう。</p>
<ul>
<li><a href="https://www.amazon.co.jp/dp/B08X3ZMF41">https://www.amazon.co.jp/dp/B08X3ZMF41</a></li>
<li><a href="https://www.amazon.co.jp/dp/B09VYR9CJM">https://www.amazon.co.jp/dp/B09VYR9CJM</a></li>
</ul><hr><p><img src="https://user-images.githubusercontent.com/111689/179458518-5b555e96-411e-4a9b-bbd1-93881efb3190.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/179461028-cf4a249d-1995-41ea-8fbe-ff80e3328635.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/179459179-ce723926-d285-4496-997f-f2a5627e9015.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/179459914-c37c1c9f-b82c-4808-b49e-f2f3cb7162ff.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/179460576-389eff26-91ac-4ac2-bb2e-0b61c834293a.png" alt="image"></p>
<p>some compositions</p><hr><p>最終稿</p>
<p><img src="https://user-images.githubusercontent.com/111689/179465665-58e60a56-00a8-49e1-8a92-e97e52afbb27.png" alt="image"></p>]]></content:encoded></item><item><title><![CDATA[2022-07-17]]></title><description><![CDATA[r7kamura's working log on 2022-07-17]]></description><link>https://r7kamura.github.io/diary/articles/73</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/73</guid><pubDate>Sat, 16 Jul 2022 20:59:17 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=9RB2jKD2Wd8">作業 with r7kamura #78 - YouTube</a></p><hr><p>editabroがchrome web storeで公開された
<a href="https://chrome.google.com/webstore/detail/editabro/eodgdnjgkjjlohklhoaapfhghgcoihmf">https://chrome.google.com/webstore/detail/editabro/eodgdnjgkjjlohklhoaapfhghgcoihmf</a></p><hr><p>GitHubのラベルを予めYAMLで定義したものに同期してくれるActionと、keepachangelogベースで定義したYAMLファイルを置くリポジトリをつくった。
<a href="https://github.com/r7kamura/github-label-sync-action">https://github.com/r7kamura/github-label-sync-action</a></p>
<p>この辺を組み合わせることで、ラベルを一気に用意してPull Requestに付与しておいたらGitHubの機能で良い感じのリリースノートを自動生成できるようになった。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-16]]></title><description><![CDATA[r7kamura's working log on 2022-07-16]]></description><link>https://r7kamura.github.io/diary/articles/72</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/72</guid><pubDate>Fri, 15 Jul 2022 21:11:28 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=fyUllbOF1sA">作業 with r7kamura #77 - YouTube</a></p><hr><p>viteでchrome拡張をつくるときに</p>
<pre><code>npm run dev
</code></pre>
<p>だとservice workerが読み込めなくて常に失敗するという問題に悩まされていて、ここ一ヶ月色々調べても解決できていなかったのだが、今日遂に</p>
<pre><code>npm run dev -- --port 3001
</code></pre>
<p>のように3000番ポート以外で試すと上手くいくことが分かった。</p>
<p>つまり、3000番だと何かおかしい環境になってしまっているのかも。昔3000番でも普通に動いていた時代はあったので、そのときの情報がChromeに残っていて問題が起きているのかもしれない。</p><hr><p>togithub.com ドメインを代わりに使えばIssueまどのreference linkが生成されなくて良いよという話を教えてもらった。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-15]]></title><description><![CDATA[r7kamura's working log on 2022-07-15]]></description><link>https://r7kamura.github.io/diary/articles/71</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/71</guid><pubDate>Thu, 14 Jul 2022 21:07:12 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=f3WlqpvPv3k">作業 with r7kamura #76 - YouTube</a></p><hr><p>RuboCopのSafeNavigationChainの違反を手作業で修正する機会が発生したので、autocorrectのサポートを入れられないかPRを出した。</p><hr><p>今日から新しいキーボードで作業しているが、Endキーが無いことにまだなれない。右Ctrlを使っていないので、これをEndキーに割り当ててもいいかもしれない。それから、運指がこれまで微妙だったせいもあり、ミスタイプが多い。特に . とか , の辺りのキー。このへんはしばらく意識的に訓練していく必要がありそう。</p><hr><p>RuboCopのchangelogは利用者が手作業で生成する仕組みになっているけど、github releasesのrelease noteをprが自動生成するやつで生成する仕組みに移行した方がhappyそうな気がしている。</p><hr><p>右CtrlとFn+HomeをEndに割り当ててみた。VIAのアプリをインストールして、なぜか自動的に認識はされなかったので公式からQ1 JIS用のJSONファイルをダウンロードしてimportすると上手く認識された。</p><hr><p>アビエイター付きのかわいいケーブルが欲しくなってきたので、適当に見繕う必要がある。黒色のキーボード筐体に似合いそうなやつを探しているけれど、他の人のキーボードを見てみると意外と白い筐体を使っている人が多いことに気付く。</p>
<p>ケーブルは黒色 + 銀のアビエイターだとださい感じになりそうなので、色付きのものが良さそうに思う。黒色にピンク字のキーキャップを注文したので、それに合わせて安めのピンク色のコイルケーブルを買ってみてもいいかもしれない。</p><hr><p>こういう画角にしたい</p>
<p><img src="https://user-images.githubusercontent.com/111689/179100388-c38b8848-83cb-49b8-b00f-c2847d836845.png" alt="image"></p>
<p><a href="https://www.youtube.com/watch?v=rj8Sp5tkVII">https://www.youtube.com/watch?v=rj8Sp5tkVII</a></p><hr><p>どうやらhamlcopを使っていてしかもpull requestをたまに送ってくれる人がいるらしく、めちゃくちゃ感謝している。実質自分はhamlcopを運用に載せられていない (改善に意欲的でhamlを使っているプロジェクトを抱えていない) ので、実際にまともに機能するかどうか自分では確かめられていないのだった。</p><hr><p><img src="https://user-images.githubusercontent.com/111689/179170008-1d9669a0-e696-4b34-9c5c-29bb819c898e.png" alt="image"></p>
<p>試しに似たような角度から撮ってみたがこんな感じ。自分の環境、画面とキーボードとの位置が、他の人々と比べてかなり近いのかもしれない？</p><hr><p><img src="https://user-images.githubusercontent.com/111689/179175192-1b81623a-d5a6-4194-b47b-b026c712be1b.png" alt="image"></p>
<p>マウスパッドを外してみた。</p><hr><p><img src="https://user-images.githubusercontent.com/111689/179205966-b2695175-9621-4871-9ff2-b37633d8b915.png" alt="image"></p>]]></content:encoded></item><item><title><![CDATA[2022-07-14]]></title><description><![CDATA[r7kamura's working log on 2022-07-14]]></description><link>https://r7kamura.github.io/diary/articles/70</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/70</guid><pubDate>Wed, 13 Jul 2022 21:09:50 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=1lhgdF2Xtt4">作業 with r7kamura #75 - YouTube</a></p><hr><p>打鍵している方が気持ちいいので、紙のメモから脱却したいという気持ちがあり、Chromeの新規タブをメモ帳にする拡張を見繕っている。エディタブ郎。</p>
<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Mozilla/Add-ons/WebExtensions/manifest.json/chrome_url_overrides">https://developer.mozilla.org/ja/docs/Mozilla/Add-ons/WebExtensions/manifest.json/chrome_url_overrides</a></li>
</ul>]]></content:encoded></item><item><title><![CDATA[2022-07-13]]></title><description><![CDATA[r7kamura's working log on 2022-07-13]]></description><link>https://r7kamura.github.io/diary/articles/69</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/69</guid><pubDate>Tue, 12 Jul 2022 21:03:14 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=G3MCB0H7cA4">作業 with r7kamura #74 - YouTube</a></p><hr><p>Lightroom Classicだと仮想コピーがあるが、Lightroomには無いらしい。残念</p><hr><p><a href="https://code.visualstudio.com/api/language-extensions/language-server-extension-guide">https://code.visualstudio.com/api/language-extensions/language-server-extension-guide</a></p>]]></content:encoded></item><item><title><![CDATA[2022-07-12]]></title><description><![CDATA[r7kamura's working log on 2022-07-12]]></description><link>https://r7kamura.github.io/diary/articles/68</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/68</guid><pubDate>Tue, 12 Jul 2022 05:55:32 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=OmmGWKrmDCo">作業 with r7kamura #73 - YouTube</a></p><hr><p>動画編集をした:
<a href="https://www.youtube.com/watch?v=HTuNoq9aEWQ">ASMR Coding - Custom Ruby linter with RuboCop - YouTube</a></p><hr><p>smart selectの対応に不満があるので、vscode-rubyのlanguage serverの実装を改善してみよう、ということになった。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-11]]></title><description><![CDATA[r7kamura's working log on 2022-07-11]]></description><link>https://r7kamura.github.io/diary/articles/67</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/67</guid><pubDate>Sun, 10 Jul 2022 23:46:56 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=JZpVxd8INl4">作業 with r7kamura #72 - YouTube</a></p><hr><p>次の週末に、Yetiをガムテープ等で適当にマスキングして染めQで黒く染めるのを試そうと考えた。</p><hr><p>あまりにも派生元ブランチが古いPull Requestを失敗させるというGitHub Actionsのworkflowをつくったので、どこかに公開しておこうと思う。</p><hr><p>YouTubeに組み込みの字幕編集機能、UI優れてて使いやすいんだろうなと勝手に思ってたけど、使ってみたら不可解な挙動だらけで大変だ。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-10]]></title><description><![CDATA[r7kamura's working log on 2022-07-10]]></description><link>https://r7kamura.github.io/diary/articles/66</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/66</guid><pubDate>Sat, 09 Jul 2022 21:07:42 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=zrRuGz_xlKQ">作業 with r7kamura #71 - YouTube</a></p><hr><p>YouTube、いまは作業風景配信が主だけど、ライブコーディングにピボットしていきたい気持ちがある。</p>
<ul>
<li>ライブコーディング配信</li>
<li>ライブコーディング動画
<ul>
<li>5分から10分程度</li>
<li>RuboCopのカスタムCopを1個つくってみましょう、とか</li>
<li>RailsCasts的な</li>
<li>Useful coding ASMR (No voice) ぐらいの位置付けでいきたい</li>
<li>後から字幕を付けて解説すると良いかも?
<ul>
<li>テキストで付ければ自動翻訳精度がそれなりに高い</li>
<li>動画ならどうせ一度は見返すのでその一度で字幕を付ける作業を完了させられると嬉しい</li>
<li>字幕を付けるのは果たしてそこまで簡単にできるのだろうか…</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>ただ毎日同じ時間に配信し続けるという活動も、それはそれで興味があって面白い。配信してると動画を撮れないし時間も取れないのが難しいところ。</p><hr><p>CHANGELOGを書くのをやめて、GitHub Releasesのノート自動生成機能に頼る方向に切り替えようかと思案していた。CHANGELOGだと、同バージョン内で何かを追加したもののやっぱり削除したみたいなものが発生した場合、消し込みができるという利点があるとか考えていたが、GitHub Releeaseの自動生成機能でも後から除外用のラベルを貼ればいいだけなので、この要求は満たせる。</p><hr><p>VSCodeの中でWebブラウザを使えば、VSCodeの画面を配信するだけでWebアプリの開発の様子を配信できる。
と考えたのだが、localhostにしか接続を許可していないようで、例えば github.com を操作する様子を見せようと思うと難しいらしいということが分かった。素直にOBSで複数ウィンドウ表示したりする必要がある。しかしこれだとあまり綺麗には表示できず、しかも操作も楽ではないので続かない。微妙だ……</p><hr><p><img src="https://user-images.githubusercontent.com/111689/178134069-0289e270-8523-42e3-b85f-3ef848dc3719.png" alt="image"></p>
<p>この画角が良さそう。三脚最大長のTV前ぐらいから見下ろし。</p><hr><p>1080pで5分で120MB程度らしい。自分の環境ですら自動的に1080pになるし、1440pにする必要をあまり感じないので、1080pで投稿すれば良さそうである。</p>
<p>例えば1つのCopをつくる動画例をつくるとして、かなり急いで10分、ゆっくり急いで20分で完成ぐらいの尺になりそう。</p><hr><p>光るマウスパッド気持ちが上がるけどケーブルが結構邪魔なのでそこは下がる。リケーブルできるならまた変わってくるんだけど。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-09]]></title><description><![CDATA[r7kamura's working log on 2022-07-09]]></description><link>https://r7kamura.github.io/diary/articles/65</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/65</guid><pubDate>Fri, 08 Jul 2022 23:30:24 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=aAxKT_-WBSg">作業 with r7kamura #70 - YouTube</a></p><hr><p>最近毎日当たり前のように前日より負荷の高い筋トレしているので、もはや記録しなくても上手く回るようになってきた。</p><hr><p>作業配信中にライブコーディングを2時間ほどやって、rubocop-rspecに出した不具合の手直しをした。</p><hr><p><a href="https://r7kamura.com/articles/2022-07-08-pomodoro-timer-kai">ポモドーロタイマー改</a>という記事を投稿した。昨日の話だけど。</p><hr><p>obs-browser-sourcesに、独立した (UIの無い) シーンスイッチャーを用意したい。</p>
<p>そろそろこういうHTML 1枚もののやつをつくるためのbundlingの仕組みを用意したい。monorepo的な構成になるのだろうか。あまり詳しくないので詳しい人にどういう仕組みでつくるのが楽なのかとか聞いてみたいが……</p>]]></content:encoded></item><item><title><![CDATA[2022-07-07]]></title><description><![CDATA[r7kamura's working log on 2022-07-07]]></description><link>https://r7kamura.github.io/diary/articles/63</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/63</guid><pubDate>Wed, 06 Jul 2022 20:48:44 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=Z-3kWXQaA8c&#x26;ab_channel=r7kamura">作業 with r7kamura #68 - YouTube</a></p><hr><p>OSSに出したPull Requestが何個かMergeされていてめでたい。</p><hr><p>90mm F2.4 300g 60mmのレンズか、85mm F1.4 620g 90mmのレンズが欲しくなっている。</p><hr><p>SVGの勉強をして前回書いたタイマーのコードを整理したかったが、RuboCopのあれこれを片付けていたら上手く時間をつくれなかった。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-06]]></title><description><![CDATA[r7kamura's working log on 2022-07-06]]></description><link>https://r7kamura.github.io/diary/articles/62</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/62</guid><pubDate>Tue, 05 Jul 2022 21:05:33 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=0c2ha5EAIHM&#x26;ab_channel=r7kamura">作業 with r7kamura #67 - YouTube</a></p><hr><p>昨日OSSに出したPull Request達に反応をもらっていたので、対応した。</p>
<p>対象がIssueやPull Requestだと、Issueからリンクを貼るとトラックバック的なリンクが貼られてしまうので、リンクをハリづらい……</p><hr><p>Notifer for GitHub、機能は良いけど細かい見た目を好みに変更したいので、こういうものを自作しても良い気がしてきた。</p>
<ul>
<li><a href="https://github.com/sindresorhus/notifier-for-github">https://github.com/sindresorhus/notifier-for-github</a></li>
</ul><hr><p>Pomodoro timer designs:</p>
<p><img src="https://user-images.githubusercontent.com/111689/177428116-14fbcb0b-b243-4095-a2a6-db43fa768ed2.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/177428126-6f6132a8-c645-46a3-bd32-d7a2aff5c260.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/177428140-2a759808-bb99-4650-8a09-79494c436eee.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/177428152-a99fc996-45d4-492b-abc9-9abad2cf2354.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/177428943-bbd84c58-47ae-47a0-94f2-c0384d00238b.png" alt="image"></p><hr><p>いま pomodoro.html にタイマー表示機能とシーン自動切替機能を付けているけど、pomodoro-timer.html と pomodoro-scene-switcher.html に分けた方が便利そうだ。破壊的変更を入れたくはないので、やるなら新設していく感じになるだろうけども。</p><hr><p>SVCのcircle要素を使うほうが楽そうな気がしてきた</p>
<ul>
<li><a href="https://css-tricks.com/how-to-create-an-animated-countdown-timer-with-html-css-and-javascript/">https://css-tricks.com/how-to-create-an-animated-countdown-timer-with-html-css-and-javascript/</a></li>
</ul><hr><p>新ポモドーロタイマー完成</p>
<ul>
<li><a href="https://r7kamura.github.io/obs-browser-sources/pomodoro-timer.html">https://r7kamura.github.io/obs-browser-sources/pomodoro-timer.html</a></li>
</ul>
<p><img src="https://user-images.githubusercontent.com/111689/177541165-cdcab8a2-02bf-447b-b33f-1a8c76f9a36d.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/177541183-4d979a3a-0b28-4985-8388-9950b1ffc2a5.jpg" alt="IMG_0075">
<img src="https://user-images.githubusercontent.com/111689/177541202-56e9d431-cf89-4c92-8186-866b554264ec.PNG" alt="IMG_6863"></p>]]></content:encoded></item><item><title><![CDATA[2022-07-05]]></title><description><![CDATA[r7kamura's working log on 2022-07-05]]></description><link>https://r7kamura.github.io/diary/articles/61</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/61</guid><pubDate>Mon, 04 Jul 2022 23:21:00 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=t7gxiMeVtw8&#x26;ab_channel=r7kamura">作業 with r7kamura #66 - YouTube</a></p>
<p>最近のアップデート:</p>
<ul>
<li>壁に照明を貼り付けた
<ul>
<li>Nanoleaf Lines</li>
</ul>
</li>
<li>机から箱までのケーブルを皮膜で覆ってまとめた</li>
<li>作業時間中にマイクで環境音も流してみることにした
<ul>
<li>主に打鍵音</li>
<li>たまに呼吸音が入る
<ul>
<li>これは理想的には要らない</li>
</ul>
</li>
</ul>
</li>
<li>休憩時間中に雨を止めてみることにした
<ul>
<li>気持ちの切り替えがしやすいかもしれない</li>
<li>OBSの再生デバイスの扱い方に問題があり、BGMだけ鳴らないことがあるので、その対策としては有効かも
<ul>
<li>雨が止まったことを契機に、休憩時間に入ったということを認識できるようになるため</li>
</ul>
</li>
</ul>
</li>
</ul><hr><p>rubocop-specのRSpec/EmptyExampleGroupにautocorrect機能があると便利だったので、つくってPull Requestを出した。不要なテストケースを2000件ほど消すという作業の中で実際にこれを使ってみたが、かなり便利だった。</p><hr><p>RSpec/EmptyExampleもあることに気付いた。</p><hr><p>円タイマーをつくるためにCSSを学んでいる</p>
<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/CSS/gradient/radial-gradient">https://developer.mozilla.org/ja/docs/Web/CSS/gradient/radial-gradient</a></li>
<li><a href="https://ics.media/entry/18966/">https://ics.media/entry/18966/</a></li>
</ul><hr><p>最近見たエンタメ:</p>
<ul>
<li>ニセモノの錬金術師
<ul>
<li>おすすめされた</li>
<li>Kindleでラフ版をまずまずのところまで読んだ</li>
</ul>
</li>
<li>SPY×FAMILY
<ul>
<li>最後の2話分で止まってたので見た</li>
</ul>
</li>
</ul>]]></content:encoded></item><item><title><![CDATA[2022-07-04]]></title><description><![CDATA[r7kamura's working log on 2022-07-04]]></description><link>https://r7kamura.github.io/diary/articles/60</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/60</guid><pubDate>Sun, 03 Jul 2022 21:03:16 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=0tpkoGHsdjM&#x26;ab_channel=r7kamura">作業 with r7kamura #65 - YouTube</a></p><hr><p>Created a custom cop I've always wanted:</p>
<ul>
<li><a href="https://github.com/r7kamura/sevencop/pull/13">Add <code>Sevencop/HashLiteralOrder</code> cop by r7kamura · Pull Request #13 · r7kamura/sevencop</a></li>
</ul><hr><p>RuboCopにPull Requestを出した</p><hr><p>これにまつわる作業しててauto-correctが欲しかったから、Pull Request出そうかな。</p>
<ul>
<li>Lint/EmptyBlock</li>
<li>RSpec/EmptyExampleGroup</li>
</ul><hr><p>キーボードとアロマディフューザーについて聞かれたので、あとでどこかに聞かれたもの一覧への回答をFAQとしてまとめておこうかしら。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-03]]></title><description><![CDATA[r7kamura's working log on 2022-07-03]]></description><link>https://r7kamura.github.io/diary/articles/59</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/59</guid><pubDate>Sat, 02 Jul 2022 21:05:09 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=vGWK7l8yysQ&#x26;ab_channel=r7kamura">作業 with r7kamura #64 - YouTube</a></p><hr><p>GitHubのchangelogを読んでいて、GitHub ProかGitHub Teams, GitHub Enterpriseだと (つまりGitHub Freeではない場合)、リポジトリでautolinkの設定をできるというのを知った。</p>
<p>リポジトリのautolinkというのは、例えば <code>JIRA-</code>  をautolink対象のprefixとすること、またそのとき生成するURLパターンを設定できて、そうすると</p>
<pre><code class="language-markdown">次のチケットに書いてあります:

- JIRA-123
</code></pre>
<p>のようなdescriptionをMarkdownで書いたときに、自動的にこれをリンクにしてくれる機能らしい。便利そう。</p>
<p>便利そうだと思ったけど、冷静に考えると番号だけ参照する機会って手入力でもしない限りないかも？もし「パターンに一致するURLを記述すると自動的に省略形式のリンクとして表示してくれる機能」なのであれば、それは便利かもしれない。</p><hr><p>RuboCopのEnabled, Safe, SafeAutoCorrect周りの話がよく分かっていなかったが、SafeとSafeAutoCorrectが導入された <a href="https://github.com/rubocop/rubocop/issues/5978">rubocop/rubocop#5978</a> では次のように説明されている:</p>
<blockquote>
<ul>
<li>Safe (true/false) - indicates whether the cop can yield false positives (by design) or not.</li>
<li>SafeAutoCorrect (true/false) - indicates whether the auto-correct the cop does is safe (equivalent) by design.</li>
</ul>
</blockquote>
<p>なので、default.ymlで設定されているCopの設定について具体例で説明すると、こんな感じか:</p>
<ul>
<li>Enabled: false に設定されている場合
<ul>
<li>新しく追加された実験的なCop</li>
<li>不具合がありそうなCop</li>
</ul>
</li>
<li>Safe: false に設定されている場合
<ul>
<li>偽陽性がある (間違ってないのに間違っていると指摘されてしまう) ことが明らかなCop</li>
</ul>
</li>
<li>SafeAutoCorrect: false に設定されている場合
<ul>
<li>破壊的な変更を持ち込んでしまう可能性があるのでおいそれとauto-correctしてほしくないCop</li>
<li>おかしな変換結果になってしまう場合があることが明らかなCop</li>
</ul>
</li>
</ul><hr><p>Hashリテラルのキーを辞書順にするCopがあると便利そうな気がしてきた。</p><hr><p>カスタムCop紹介記事を書いた:</p>
<ul>
<li><a href="https://r7kamura.com/articles/2022-07-03-sevencop-belongs-to-optional">Sevencop/BelongsToOptional</a></li>
</ul><hr><p>筋トレ振り返り記事を書いた:</p>
<ul>
<li><a href="https://r7kamura.com/articles/2022-07-03-workout-initiation">筋トレ初動の立ち回り</a></li>
</ul>]]></content:encoded></item></channel></rss>