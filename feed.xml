<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[r7kamura/diary]]></title><description><![CDATA[r7kamura's daily working log.]]></description><link>https://r7kamura.github.io/diary/</link><generator>r7kamura/diary</generator><lastBuildDate>Wed, 03 Aug 2022 09:35:06 GMT</lastBuildDate><atom:link href="https://r7kamura.github.io/diary/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[2022-08-02]]></title><description><![CDATA[r7kamura's working log on 2022-08-02]]></description><link>https://r7kamura.github.io/diary/articles/89</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/89</guid><pubDate>Mon, 01 Aug 2022 21:04:04 GMT</pubDate><content:encoded><![CDATA[<hr><p>The pull request I have submitted to rubocop  for template language support is not yet completed and in draft status, so I would like to complete it today.</p><hr><p>I feel that perhaps there should be a rubocop-markdown that inspects Ruby code in Markdown code blocks, or rubocop-comment that inspects Ruby code in code comments.</p><hr><p>But the existing YARD and Markdown parsers cannot return ASTs with location information, so it's going to be difficult to achieve that.</p>]]></content:encoded></item><item><title><![CDATA[2022-08-01]]></title><description><![CDATA[r7kamura's working log on 2022-08-01]]></description><link>https://r7kamura.github.io/diary/articles/88</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/88</guid><pubDate>Mon, 01 Aug 2022 02:04:43 GMT</pubDate><content:encoded><![CDATA[<hr><p>コミックNewtypeの日付表記が曖昧なので、<code>"10月24日配信"</code> という文字列を去年の10月24日のTimeのインスタンスとして処理する機能をweneedfeedに追加した。</p><hr><p>rubocopのテンプレート言語サポートの実装を改善して、影響範囲をかなり小さくできた。</p><hr><p>weneedfeedのOPMLのXML生成時にエスケープの不具合を見つけて修正できた。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-30]]></title><description><![CDATA[r7kamura's working log on 2022-07-30]]></description><link>https://r7kamura.github.io/diary/articles/86</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/86</guid><pubDate>Sat, 30 Jul 2022 01:08:32 GMT</pubDate><content:encoded><![CDATA[<hr><p>ひさしぶりにRustを書いていて全く分かっていない</p><hr><p>ファイル全体コピーが動くようになった。
<a href="https://github.com/r7kamura/gitcp">https://github.com/r7kamura/gitcp</a></p><hr><p><a href="https://dev.to/r7kamura/automate-refactoring-by-rubocop-todo-corrector-2mli">Automate refactoring by rubocop-todo-corrector - DEV Community 👩‍💻👨‍💻</a>
これを書いた。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-29]]></title><description><![CDATA[r7kamura's working log on 2022-07-29]]></description><link>https://r7kamura.github.io/diary/articles/85</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/85</guid><pubDate>Fri, 29 Jul 2022 01:03:50 GMT</pubDate><content:encoded><![CDATA[<hr><p>Rails Upgrade Guidesを眺めていて、新しくCopが1つ欲しくなったのでrubocop-railsにPull Requestを投げた。</p><hr><p>GitHubのテンプレートリポジトリからファイルをコピーしてくるようなツールがほしいと思い、degitには幾らか不満があったので、そういうものを自作することにした。最終的にgitcpというcpのラッパーみたいなものでいくことにした。</p><hr><p>weneedfeed-comic-newtypeをつくろうとして、雛形がほしいなと思い、こういう経緯になっている。</p><hr><p>zipはファイル単位での圧縮なのでtar.gzに比べると当然圧縮率が低いが、zipには全体を解凍しなくても単一ファイルのみ解凍できるという特色があるので、そういう用途では速そうだ。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-28]]></title><description><![CDATA[r7kamura's working log on 2022-07-28]]></description><link>https://r7kamura.github.io/diary/articles/84</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/84</guid><pubDate>Wed, 27 Jul 2022 22:40:03 GMT</pubDate><content:encoded><![CDATA[<hr><p>rubocop gemを改造して、slimファイルを直接動作させる実験に成功した。</p>
<pre><code>$ ./exe/rubocop dummy.slim
Inspecting 1 file
W

Offenses:

dummy.slim:1:3: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
- "a"
  ^
dummy.slim:1:3: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
- "a"
  ^^^
dummy.slim:1:6: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
- "a"
     
dummy.slim:2:3: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
= b
  ^
dummy.slim:2:4: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
= b
   
dummy.slim:3:5: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
| #{"c"}
    ^
dummy.slim:3:5: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
| #{"c"}
    ^^^
dummy.slim:3:8: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
| #{"c"}
       
dummy.slim:4:3: W: Lint/UselessAssignment: Useless assignment to variable - a.
- a = 1
  ^
dummy.slim:4:3: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
- a = 1
  ^
dummy.slim:4:8: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
- a = 1
       
dummy.slim:5:3: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
- a if array.size > 0
  ^
dummy.slim:5:8: C: [Correctable] Style/NumericPredicate: Use array.size.positive? instead of array.size > 0.
- a if array.size > 0
       ^^^^^^^^^^^^^^
dummy.slim:5:8: C: [Correctable] Style/ZeroLengthPredicate: Use !empty? instead of size > 0.
- a if array.size > 0
       ^^^^^^^^^^^^^^
dummy.slim:5:22: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
- a if array.size > 0
                     
dummy.slim:6:3: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
- a if !b
  ^
dummy.slim:6:3: C: [Correctable] Style/NegatedIf: Favor unless over if for negative conditions.
- a if !b
  ^^^^^^^
dummy.slim:6:10: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
- a if !b
         
dummy.slim:7:3: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
- a if !b # rubocop:disable Style/NegatedIf
  ^
dummy.slim:7:44: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
- a if !b # rubocop:disable Style/NegatedIf
                                           
dummy.slim:8:6: C: [Correctable] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
- if "a"
     ^
dummy.slim:8:6: C: [Correctable] Style/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
- if "a"
     ^^^
dummy.slim:8:9: C: [Correctable] Layout/TrailingEmptyLines: Final newline missing.
- if "a"
        

1 file inspected, 23 offenses detected, 22 offenses autocorrectable
</code></pre><hr><p>rubocopの改造とrubocop-slimでの実験が上手くいったので、rubocopにpull requestをdraftで出した。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-27]]></title><description><![CDATA[r7kamura's working log on 2022-07-27]]></description><link>https://r7kamura.github.io/diary/articles/83</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/83</guid><pubDate>Tue, 26 Jul 2022 22:38:02 GMT</pubDate><content:encoded><![CDATA[<hr><p>githubのcommand palleteが進化していて、pull requestのtitleやdescriptionを変更するコマンドが増えているのを発見した。UIも個別のページごとに最適化されるようになっていた。ドキュメントページを見に行ったらその説明も追加されているようだった。</p>
<p>descriptionのeditボタンを押すためにchrome extenisonをつくっていたけれど、このコマンドがあればお役御免かもしれない。</p><hr><p>.rubocop_todo_corrector_ignore というファイルを置けるように機能追加した。</p><hr><p>1Passwordのアプデをしたら大きめにUIが変わって、そしてone-time passwordをcopyするためのショートカットキーが動かないようだった。これは公式フォーラムにサインアップして不具合報告をしておいた。結構使う機能なのでこれが動かないのは苦しい。</p><hr><p>Google Homeとルンバの連携を試した。両方のアプリをiPhoneに入れていたので非常に短い手順で完了できた。3タップぐらい。</p>
<p>音声操作は、「N時間後にルンバを起動して」といった相対時間指定での命令ができるのが便利。</p><hr><p>rubocop-todo-correctorにinputs.gh_create_arguments的なオプションを追加したい。
かなりghべったりな形式になるが、レビュアーやプロジェクトや追加のラベルの割当などを柔軟にできるようになる。</p><hr><p>BUNDLE_ONLYが使えるようになる変更がMergeされた。bundler 2.4.0には入るはず。</p><hr><p>Performance/RedundantMatch copのautocorrectに漏れがあったので改善した。</p><hr><p>workflow dispatchのAPI周りに不具合がありそうだったのでdiscussionで報告した。</p>
<ul>
<li><a href="https://togithub.com/community/community/discussions/27262">https://togithub.com/community/community/discussions/27262</a></li>
</ul><hr><p>RuboCopの内部実装にPull Requestを出すべくコードを読んでいる。</p>
<p>RuboCop::Team#investigate(processed_source) が、ファイルを受け取ってOffensesを返すという実装を担っているから、この辺にRubyExtractorを噛ませられるような変更をできないか検討しているところ。</p><hr><p>RuboCop::Runner#do_inspection_loop あたりでやるほうが丸いかもしれない。ここがfileからprocessed_sourceに変換している箇所であるので、ここがfileからprocessed_sourcesに変換するように変わったとしても違和感ない。</p><hr><ol>
<li>一通りCopに掛ける</li>
<li>不要な <code>rubocop:disable</code> を検知するために1回掛ける</li>
<li>不要な <code>rubocop:enable</code> を検知するために1回掛ける</li>
</ol>
<p>というのが1つのファイルに対して行われることらしい。この2, 3の再実行処理のために、sourceが再利用されているっぽい。</p>
<p>do_inspection_loopはprocesed_sourceを引数に取るようにして、もうちょい外側でfileからprocessed_sourceに変換するようにすれば上手くいくかも。</p><hr><p>繰り返しの単位が、1つのファイルに対して一通りautocorrectを試して、変更が加わればまたファイルを読み込み直してもう一度、という感じなので、ここより外側でprocessed sourceに分解してると読み込み直しができなくて詰まった。もっと内側でやらないとダメかも。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-26]]></title><description><![CDATA[r7kamura's working log on 2022-07-26]]></description><link>https://r7kamura.github.io/diary/articles/82</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/82</guid><pubDate>Tue, 26 Jul 2022 06:17:05 GMT</pubDate><content:encoded><![CDATA[<hr><p>これを書いた。
<a href="https://dev.to/r7kamura/aggregate-offenses-count-in-rubocoptodoyml-4oda">Aggregate offenses count in .rubocop_todo.yml - DEV Community 👩‍💻👨‍💻</a></p><hr><p>これを書いた。
<a href="https://r7kamura.com/articles/2022-07-26-stray">『Stray』をやった</a></p>]]></content:encoded></item><item><title><![CDATA[2022-07-25]]></title><description><![CDATA[r7kamura's working log on 2022-07-25]]></description><link>https://r7kamura.github.io/diary/articles/81</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/81</guid><pubDate>Sun, 24 Jul 2022 21:22:54 GMT</pubDate><content:encoded><![CDATA[<hr><p>昨日に引き続き、vscode-rubyのlanguage-server-rubyを読んでいく。</p>
<p>昨日は6つのProviderから構成されているという話をし、DocumentHighlightProviderの実装を読んだ。</p>
<ul>
<li>FoldingRangeProvider</li>
<li>DocumentHighlightProvider</li>
<li>DocumentSymbolProvider</li>
<li>DocumentFormattingProvider</li>
<li>ConfigurationProvider</li>
<li>WorkspaceProvider</li>
</ul><hr><p>SelectionRangeProviderというのを追加すれば、括弧だけでなく二重引用符やdo-endなどにもExpand selectionコマンドを対応させられるはず。</p>
<ul>
<li><a href="https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_selectionRange">https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_selectionRange</a></li>
</ul><hr><p>DocumentSymbolProviderを見てみたが、DocumentHighlightProviderと比べて幾らか難しい実装だった。
tree-sitterのwrapper?であるForestのstreamっぽいAPIを使っていて複雑。</p><hr><p>DocumentHighlightAnalyzerはリクエストのたびにインスタンスをつくって解析する仕組みだったが、DocumentSymbolAnalyzerとFoldingRangeAnalyzerは1個だけつくって使い回す実装らしく、Analyzer.tsがシングルトンをつくってそのプロパティにもたせている。</p><hr><p>Analyzer.tsには深さ優先探索のtree-walkingを行う仕組みが実装されている。treeが送られ続けてくるforestStreamというやつをanalyzerのシングルトンが購読しており、これをwalkで歩き続けつつ、symbolとfoldingの解析を続けている。FoldingRangeリクエストを受け取った際には、このanalyzerのシングルトンの現在の状態を読んで返すだけ。</p><hr><p>DocumentFormattingProviderを見てみよう。</p>
<p>次の二種類のリクエストに対応するProviderであるらしい。</p>
<ul>
<li>textDocument.Formatting</li>
<li>textDocument.rangeFormatting</li>
</ul>
<p>前者は与えられたドキュメント全体を、後者は与えられたドキュメントのうち指定された範囲のフォーマットを整えるためのものらしい。</p>
<blockquote>
<p>The document range formatting request is sent from the client to the server to format a given range in a document</p>
</blockquote>
<p>language-server-rubyの実装では、ここでRuboCopやらRufoやらを利用することになる。</p>
<p>rxjsのObservableが利用されている。外部のプロセスとのやりとりが発生するところをこれでやりとりしているのだろうか。</p>
<p>「ドキュメント」という単位が何を表しているのかという話があった。これは多分「ファイル」と読み替えてもさほど影響はないように思う。language-server-rubyでは、DocumentManager.tsがdocumentsというシングルトンを提供している。ドキュメントはIDを持っているらしく、このIDでdocumentsに問い合わせると対象のドキュメントが取得できるという仕組みらしい。</p>
<p>vscode-languageserverというパッケージがdocumentsを管理する仕組みを提供していて、documents.listen(connection) とやると良い感じにクライアントのドキュメントの情報を管理してくれるらしい。つまり、document formattingのリクエストでわざわざソースコードをやり取りしなくても、そこではドキュメントのIDだけ含めておけば良くなるということ。</p>
<p>Formatting Providerは、リクエストに応じて <code>Promise&#x3C;TextEdit[]></code> を返せば良いらしい。TextEditはvscode-languageserverが提供している。TextEditというのは、テキストを変形させる命令のことだと思う (e.g. replaceとか)。</p>
<blockquote>
<p>result: <a href="https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textEdit">TextEdit[]</a> | null describing the modification to the document to be formatted.</p>
</blockquote>
<p>BaseFormatterとRuboCopFormatterを見てみると、spawnを使って子プロセスをつくり、そこで <code>bundle exec rubocop -s ... -a</code> を実行していることがわかる。-sは標準入力経由で使うやつらしい。</p>
<pre><code>    -s, --stdin FILE                 Pipe source from STDIN, using FILE in offense
                                     reports. This is useful for editor integration.
</code></pre>
<pre><code>$ echo "1 + 2" | rubocop -s foo.rb -A
Inspecting 1 file
C

Offenses:

foo.rb:1:1: C: [Corrected] Style/FrozenStringLiteralComment: Missing frozen string literal comment.
1 + 2
^
foo.rb:2:1: C: [Corrected] Layout/EmptyLineAfterMagicComment: Add an empty line after magic comments.
1 + 2
^

1 file inspected, 2 offenses detected, 2 offenses corrected
====================
# frozen_string_literal: true

1 + 2
</code></pre>
<p>これで ====== の後ろを見れば変更後のコードが取得できる。この標準出力をもとに、``TextEdit[]` を用意する。これには<a href="https://github.com/google/diff-match-patch">diff-match-patch</a>というNPMパッケージが利用されている。</p>
<p>選択範囲だけformatしてくれというリクエストだった場合でも、ファイル全体に対してRuboCopを利用するが、diffを見て選択範囲からの書き換えだけ適用することになっている。</p><hr><p>LSPの説明でmethod, paramsと呼ばれていたのはこういうやつのことか。</p>
<blockquote>
<p>LSP クライアントからサーバーへのメッセージとして、以下のような文字列が送られます。(改行は \r\n)</p>
</blockquote>
<pre><code>Content-Length: 88

{
    "jsonrpc": "2.0",
    "id": 1,
    "method": "shutdown",
    "params": null
}
</code></pre>
<ul>
<li><a href="https://qiita.com/vain0x/items/d050fe7c8b342ed2004e#_reference-a5e1c1658f719e7db952">https://qiita.com/vain0x/items/d050fe7c8b342ed2004e#_reference-a5e1c1658f719e7db952</a></li>
</ul>
<blockquote>
<p>この文字列は、今回はサーバーのプロセスの標準入力に送られてきます。標準入力を受け取るには process.stdin の data イベントを監視して、送られてくるデータをバッファーにためていけばいいです。</p>
</blockquote>
<p>実際にはどう送られてくるのかと思ったら、この場合は標準入力を利用しているんだな。素朴で嬉しい。</p><hr><p>vscode-textlintが要件としては分かりやすくて参考になりそうだった。実装はまだ読んでいない。</p>
<ul>
<li><a href="https://github.com/taichi/vscode-textlint">https://github.com/taichi/vscode-textlint</a></li>
</ul><hr><p>クライアント側の実装も学び始めた。これを読んでみている。</p>
<ul>
<li><a href="https://qiita.com/minebreaker/items/c53e4dddb0709492d362">https://qiita.com/minebreaker/items/c53e4dddb0709492d362</a></li>
</ul>
<p>クライアント (vscodeの拡張) 起動時に、サーバ起動用のコマンド名も記述するもんなんだな。まあそれはそうか。
例えばsolargraph gemはlanguage serverを提供していたはずで、あれは別途自前で起動させておくものだった気がするから、多分そういう場合にはサーバーを起動しないオプションもあるのだと思う。</p><hr><p>手元でvscode-rubyのビルドを試してみたが大変だった。これを見ながら進めた。</p>
<ul>
<li><a href="https://github.com/rubyide/vscode-ruby/blob/main/docs/developing.md">https://github.com/rubyide/vscode-ruby/blob/main/docs/developing.md</a></li>
</ul>
<pre><code>yarn install
</code></pre>
<p>これを実行する時点でエラー。./packages/vscode-ruby-client/package.jsonからdependenciesに書いているlanguage-server-rubyが存在しないとのこと。lernaの使い方が間違ってるとか? とりあえずこのdependenciesの行を手動で消すと進めるように。</p>
<p>yarn install中にtree-sitter-rubyの何かでエラー。npm install tre-sitter-rubyを試すも問題無し。再度yarn installを実行するとなぜか成功。なぜ？</p>
<p>yarn watchも失敗。</p>
<blockquote>
<p>Error: error:0308010C:digital envelope routines::unsupported
at new Hash (node:internal/crypto/hash:67:19)</p>
</blockquote>
<p>webpackのhash関数がどうのこうのということで、ググってこの環境変数を追加して再試行すると上手くいった。</p>
<pre><code>export NODE_OPTIONS=--openssl-legacy-provider
</code></pre>]]></content:encoded></item><item><title><![CDATA[2022-07-24]]></title><description><![CDATA[r7kamura's working log on 2022-07-24]]></description><link>https://r7kamura.github.io/diary/articles/80</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/80</guid><pubDate>Sat, 23 Jul 2022 21:18:27 GMT</pubDate><content:encoded><![CDATA[<p>今回はvscode-rubyの読書メモを書き連ねていきます。</p><hr><p>vscode-rubyは、複数のパッケージを扱うmonorepoとして管理されている。</p>
<ul>
<li>vscode-ruby</li>
<li>vscode-ruby-client</li>
<li>vscode-ruby-debugger</li>
<li>language-server-ruby</li>
</ul>
<p>monorepoの管理にはLernaを使っているとのこと。</p><hr><p>language-server-rubyについて詳しく見ていく。</p>
<p>package.jsonを見ると、次のパッケージがdependenciesに含まれていた。</p>
<ul>
<li>web-tree-sitter</li>
<li>web-tree-sitter-ruby</li>
</ul>
<p>web- prefix付きなのが気になるが、確かにtree-sitterが使われている。</p>
<p>package.jsonのmainフィールドにdist/index.jsとあり、npm run buildではesbuild.jsが利用されている。</p>
<p>esbuild.jsの中では、web-tree-sitter-ruby/tree-sitter-ruby.wasmが参照されている。
なるほど、WASM形式でビルドされてNode.js等で使えるように配布されているのがweb-tree-sitterなのかな。
ちなみにtree-sitterはRustで実装されている。</p><hr><ul>
<li><a href="https://github.com/rubyide/vscode-ruby">https://github.com/rubyide/vscode-ruby</a></li>
<li><a href="https://github.com/tree-sitter/tree-sitter">https://github.com/tree-sitter/tree-sitter</a></li>
<li><a href="https://github.com/tree-sitter/tree-sitter-ruby">https://github.com/tree-sitter/tree-sitter-ruby</a></li>
</ul><hr><p>language-server-rubyのesbuild.jsを見ると、次の二つのことをやっているのが分かる。</p>
<ul>
<li>tree-sitter{,-ruby}.wasmをコピーして、distディレクトリに入れる</li>
<li>src/inedx.tsをビルドして、distディレクトリに入れる</li>
</ul>
<p>language-server-rubyのエントリポイントがsrc/index.jsであることが分かったので、ここを読み進めていく。</p><hr><p>手元に環境にnodenvが入っているので、vscode-rubyのリポジトリのルートディレクトリで次のコマンドを実行するだけで環境構築を完了させられた。</p>
<pre><code>nodenv install
npm install
</code></pre>
<p>これをやらないと、VSCodeが怒ってくる。</p>
<p><img src="https://user-images.githubusercontent.com/111689/180624816-964a6b5b-a25a-44e5-bc95-26d8ea1b648f.png" alt="image"></p><hr><p>esbuildを使うのは初めてだけど、こういう感じで使うんだなあ。</p>
<p><code>esbuild</code> というexecutableを実行するわけではなく、</p>
<pre><code>node esbuild.js
</code></pre>
<p>と実行するというのが面白い。普通だったらオプションとかを渡したくなってCLIオプションを付けるためにCLIを用意するものだけど、esbuildの場合はどうせ設定ファイルを用意することになるので、そういうものを用意する必要は無いわという判断なのだろうか。まあ無くて良いなら無いに越したことはない。</p><hr><pre><code class="language-javascript">// Don't die when attempting to pipe stdin to a bad spawn
// https://github.com/electron/electron/issues/13254
process.on('SIGPIPE', () => {
	log.error('SIGPIPE received');
});
</code></pre>
<p>とあり、そういえばVS CodeはElectronベースだから、Electronの不具合の影響を受けるんだったと思い出した。</p><hr><p>基本のlanguage serverの実装はこういう感じのようだ。</p>
<pre><code class="language-javascript">import { createConnection, ProposedFeatures } from "vscode-languageserver";
cosnt connection = createConnection(ProposedFeatures.all);
// Customize connection as you like...
connection.listen();
</code></pre><hr><pre><code class="language-javascript">let server;
connection.onInitialize(async (params) => {
  server = new Server(connection, params);
  server.initialize();
  return server.capabilities;
});
</code></pre>
<p>こんな感じのコードが書かれているから、実際には <code>Server</code> という内部実装の中でいろいろな処理をやっている。</p>
<p>なので、読むべきは次の実装:</p>
<ul>
<li>Serverのconstructor</li>
<li>Server#initialize</li>
</ul>
<p>capabilitiesというのは、「このlanguage serevrはDocumentHighlightに対応ています」のような情報を明示するためのオブジェクトらしい。</p>
<ul>
<li><a href="https://code.visualstudio.com/api/language-extensions/programmatic-language-features">https://code.visualstudio.com/api/language-extensions/programmatic-language-features</a></li>
</ul><hr><p>language-server-rubyでは、VS Codeの拡張として提供する各機能の単位を "Provider" と呼称しているようだ。VS Codeの用語なのか独自用語なのかはわからない。</p>
<p>language-server-rubyでは、次の6つのProviderを用意しているようだ。</p>
<ul>
<li>FoldingRangeProvider</li>
<li>DocumentHighlightProvider</li>
<li>DocumentSymbolProvider</li>
<li>DocumentFormattingProvider</li>
<li>ConfigurationProvider</li>
<li>WorkspaceProvider</li>
</ul>
<p>前者4つは初期化フェーズ中に用意され、後者2つは初期化フェーズ完了後に用意される。connection.onInitializeとconnection.onInitialize<strong>d</strong>でそれぞれ用意されている。</p>
<ul>
<li>Server#initialize</li>
<li>Server#setup</li>
</ul>
<p>でそれぞれ実装されているが、このネーミングは少し分かりづらい…</p>
<ul>
<li>Server#onConnectionInitialize</li>
<li>Server#onConnectionInitialized</li>
</ul>
<p>とかで良かっただろうと思う。</p>
<p>その話はさておき、Server.tsの主な仕事はこのようにProviderを用意してあげることらしく、主な実装はつまりそれぞれのProviderに書かれているに違いない。</p>
<p>Providerは、初期化時にconnectionを受け取って、何か良い感じに動くもののようだということが分かっている。</p><hr><p>各種Providerは基底Providerクラスを継承しているらしい。
各種Providerは .registerというstatic methodを持っていて、外部向けのインターフェースがこれ</p><hr><p>Connection#onDocumentHighlight という、コールバック登録用のメソッドが生えているらしいDocumentHighlightProviderはこれをそのconstructorで呼び出している。ググってもonDocumentHighlightに関する情報は乏しい……</p>
<p>onDocumentHighlightに渡す引数はServerRequestHandler型で、実際のコード例を見ると、TextDocumentPositionParams型の引数を取るらしい。位置情報が与えられるので、それに応じて何か適切に動作しろということだろうか。<code>Promise&#x3C;DocumentHighlight[]></code> 型の値を返す関数として実装されている。</p>
<p>paramsはpositionとuriを持つObjectらしい。多分ファイルパスとその中での位置情報が入っている。</p>
<p>DocumentHighlightAnalyzer.analyze にこれらの値を渡してその返り値をそのまま返している。役割分担を整理するとこうだ:</p>
<ul>
<li>Provider
<ul>
<li>Connection#onDocumentHighlight のことを知っている</li>
<li>適切なハンドラー関数を用意してあげる責務を持つ</li>
</ul>
</li>
<li>Analyzer
<ul>
<li>Connectionについては詳しいことは知らない</li>
<li>コードの位置情報とファイルパスをもらって解析を行うだけ</li>
</ul>
</li>
</ul><hr><p>DocumentHighlightAnalyzerでは、tree-sitterを利用した構文の解析と、<code>DocumentHighlight[]</code> の生成をやっている。どういう機能を持っているかというと、多分こんな感じ:</p>
<ul>
<li>endにカーソルを載せているときは、対応するbeginやdoからendまでをハイライトする</li>
<li>beginやdoにカーソルを載せているときは、そこから対応するendまでをハイライトする</li>
</ul>
<p>tree-sitter-rubyの生成する構文木の実例を見ながら進めていった方が分かりやすいかもしれない。</p>
<p>vscodeの "document highlight" という機能・概念を正確にするため、ぐぐってみた方が良さげ。</p>
<blockquote>
<p>A document highlight is a range inside a text document which deserves special attention. Usually a document highlight is visualized by changing the background color of its range.</p>
</blockquote>
<ul>
<li><a href="https://vshaxe.github.io/vscode-extern/vscode/DocumentHighlight.html">https://vshaxe.github.io/vscode-extern/vscode/DocumentHighlight.html</a></li>
</ul>
<p><img src="https://user-images.githubusercontent.com/111689/180629880-49960fae-d5b1-4e47-8978-4e66791d37bd.png" alt="image"></p>
<p>いろいろ調べていると、次のような言及があった。</p>
<blockquote>
<p>textDocument/documentHighlightは、同じシンボルの使用箇所をエディタ上でハイライトする場合にも使用できます。</p>
</blockquote>
<ul>
<li><a href="https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4">https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4</a></li>
</ul>
<p><img src="https://user-images.githubusercontent.com/111689/180630105-73de7a93-c83b-4004-abda-4a95db868978.png" alt="image"></p><hr><p><img src="https://user-images.githubusercontent.com/111689/180648140-a095e438-519d-43c1-9028-7b29296b3fa0.png" alt="image"></p>
<p>この機能だな。endにカーソルが載っている状態だと、そのendと対応するdoの背景色が変わっている。</p>
<p>if elsif else end や case when end, begin rescue else ensure end のときは全部光ってほしいな。少し改良してみる。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-22]]></title><description><![CDATA[r7kamura's working log on 2022-07-22]]></description><link>https://r7kamura.github.io/diary/articles/78</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/78</guid><pubDate>Thu, 21 Jul 2022 21:50:04 GMT</pubDate><content:encoded><![CDATA[<hr><p>editabroにmonaco-markdownを導入するprをもらったので、monaco-markdownのソースコードを一通り読んでいる</p><hr><p>editabroのCIを改善して、リリースノート自動生成機能を有効化し (ノート生成だけまだ実験的なので手動でやっていた)、あと提出用のzipの自動生成とリリースへの紐づけも行うようにした。</p>
<p>どうやらChrome Web Storeへの提出も自動でやってくれるactionがあるらしいが、なんか怖いのと説明文を提出のついでに直したりする工程がいま存在しているので、ここの自動化は未着手。</p><hr><p>r7kamura/workflowsに、chrome拡張のリリース用workflowを足した。</p><hr><p>WindowsでもMagic Trackpadが動いたので最高。</p><hr><p>MV7をしばらく試した感想:</p>
<ul>
<li>ダイナミックマイクを使うと、ほとんどの音が耳元で鳴っているかのように聴こえる</li>
<li>打鍵音をダイナミックでマイクを入れてもあまり心地良くない
<ul>
<li>耳元で打鍵されると鬱陶しいから</li>
</ul>
</li>
<li>ひとり語りの音声だけ撮りたい場合はダイナミックマイクの方が音質が相当いい</li>
</ul>
<p>試していない仮説:</p>
<ul>
<li>コンデンサマイクをゲインを下げて口元で使えばそれでいいのでは説</li>
</ul>]]></content:encoded></item><item><title><![CDATA[2022-07-20]]></title><description><![CDATA[r7kamura's working log on 2022-07-20]]></description><link>https://r7kamura.github.io/diary/articles/76</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/76</guid><pubDate>Tue, 19 Jul 2022 21:07:02 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=CH0rAOmT938&#x26;ab_channel=r7kamura">作業 with r7kamura #81 - YouTube</a></p><hr><p>gh-pr-releaseをリリースノート生成APIで代替できないか色々実験したものの、上手くいかなかった。</p><hr><p>YouTubeのコメント読み上げおばけというchrome拡張、YouTubeを英語のUIにすると英語で読み上げるんだな……</p><hr><p>rubocop-railsにprを出したが、果たして</p>
<ul>
<li><a href="https://togithub.com/rubocop/rubocop-rails/pull/747">https://togithub.com/rubocop/rubocop-rails/pull/747</a></li>
</ul>]]></content:encoded></item><item><title><![CDATA[2022-07-19]]></title><description><![CDATA[r7kamura's working log on 2022-07-19]]></description><link>https://r7kamura.github.io/diary/articles/75</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/75</guid><pubDate>Mon, 18 Jul 2022 21:02:49 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=Y-DN_nGx3wk">作業 with r7kamura #80 - YouTube</a></p><hr><p><a href="https://www.youtube.com/watch?v=B5wdRcv-zQA">ASMR Coding: Chrome extension in 20 min (subtitle commentary available) - YouTube</a>
これを公開した。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-18]]></title><description><![CDATA[r7kamura's working log on 2022-07-18]]></description><link>https://r7kamura.github.io/diary/articles/74</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/74</guid><pubDate>Sun, 17 Jul 2022 21:04:22 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=Jq3aA-WH4Wo">作業 with r7kamura #79 - YouTube</a></p><hr><p>github-label-sync-actionという仕組みをつくって実運用に載せたら\Goodという話を記事にまとめておきたい。</p><hr><p><img src="https://user-images.githubusercontent.com/111689/179433107-b8dc65dc-7919-4dbf-9b94-77d5d454ac23.png" alt="image"></p>
<p><img src="https://user-images.githubusercontent.com/111689/179433173-a7138779-c479-426b-9885-c1378cfda08a.png" alt="image"></p>
<p>ほとんどの人が黒色買ってて、やっぱり黒色の方が見た目がいい気がする。キーボードが黒色だから対比としてグレーの方がいいかなと思ったけど、これ見ると黒色の方が良さそうに見える。この人は机の天板が黒色だから対比となるようグレーにしたと仰っていて、それは納得できる理由。</p>
<p>引用元:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=rs8RSewaLjQ">https://www.youtube.com/watch?v=rs8RSewaLjQ</a></li>
<li><a href="https://www.youtube.com/watch?v=6VD9kFY4Abk">https://www.youtube.com/watch?v=6VD9kFY4Abk</a></li>
</ul>
<p>Amazon.co.jpで調べた限りだと、やはり高いけど有名なGrovemadeのblack mediumか、日本のメーカーがつくっている4800円のやつが良さそうに思った。Grovemadeは公式で90ドルだけど、12400円+送料 (+関税?) になる。Amazonだと19800円で取り扱っている。いずれもAmazonでは公式で売っているわけではなくて、マーケットプレイス経由。</p>
<p>800円ぐらいのものも売られているが、品質が怪しい、サイズがなぜか適切なやつが無い、到着が数週間後になるなどのものが多い。恐らく中国製ということだろう。</p>
<ul>
<li><a href="https://www.amazon.co.jp/dp/B08X3ZMF41">https://www.amazon.co.jp/dp/B08X3ZMF41</a></li>
<li><a href="https://www.amazon.co.jp/dp/B09VYR9CJM">https://www.amazon.co.jp/dp/B09VYR9CJM</a></li>
</ul><hr><p><img src="https://user-images.githubusercontent.com/111689/179458518-5b555e96-411e-4a9b-bbd1-93881efb3190.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/179461028-cf4a249d-1995-41ea-8fbe-ff80e3328635.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/179459179-ce723926-d285-4496-997f-f2a5627e9015.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/179459914-c37c1c9f-b82c-4808-b49e-f2f3cb7162ff.png" alt="image">
<img src="https://user-images.githubusercontent.com/111689/179460576-389eff26-91ac-4ac2-bb2e-0b61c834293a.png" alt="image"></p>
<p>some compositions</p><hr><p>最終稿</p>
<p><img src="https://user-images.githubusercontent.com/111689/179465665-58e60a56-00a8-49e1-8a92-e97e52afbb27.png" alt="image"></p>]]></content:encoded></item><item><title><![CDATA[2022-07-17]]></title><description><![CDATA[r7kamura's working log on 2022-07-17]]></description><link>https://r7kamura.github.io/diary/articles/73</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/73</guid><pubDate>Sat, 16 Jul 2022 20:59:17 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=9RB2jKD2Wd8">作業 with r7kamura #78 - YouTube</a></p><hr><p>editabroがchrome web storeで公開された
<a href="https://chrome.google.com/webstore/detail/editabro/eodgdnjgkjjlohklhoaapfhghgcoihmf">https://chrome.google.com/webstore/detail/editabro/eodgdnjgkjjlohklhoaapfhghgcoihmf</a></p><hr><p>GitHubのラベルを予めYAMLで定義したものに同期してくれるActionと、keepachangelogベースで定義したYAMLファイルを置くリポジトリをつくった。
<a href="https://github.com/r7kamura/github-label-sync-action">https://github.com/r7kamura/github-label-sync-action</a></p>
<p>この辺を組み合わせることで、ラベルを一気に用意してPull Requestに付与しておいたらGitHubの機能で良い感じのリリースノートを自動生成できるようになった。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-16]]></title><description><![CDATA[r7kamura's working log on 2022-07-16]]></description><link>https://r7kamura.github.io/diary/articles/72</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/72</guid><pubDate>Fri, 15 Jul 2022 21:11:28 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=fyUllbOF1sA">作業 with r7kamura #77 - YouTube</a></p><hr><p>viteでchrome拡張をつくるときに</p>
<pre><code>npm run dev
</code></pre>
<p>だとservice workerが読み込めなくて常に失敗するという問題に悩まされていて、ここ一ヶ月色々調べても解決できていなかったのだが、今日遂に</p>
<pre><code>npm run dev -- --port 3001
</code></pre>
<p>のように3000番ポート以外で試すと上手くいくことが分かった。</p>
<p>つまり、3000番だと何かおかしい環境になってしまっているのかも。昔3000番でも普通に動いていた時代はあったので、そのときの情報がChromeに残っていて問題が起きているのかもしれない。</p><hr><p>togithub.com ドメインを代わりに使えばIssueまどのreference linkが生成されなくて良いよという話を教えてもらった。</p>]]></content:encoded></item><item><title><![CDATA[2022-07-15]]></title><description><![CDATA[r7kamura's working log on 2022-07-15]]></description><link>https://r7kamura.github.io/diary/articles/71</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/71</guid><pubDate>Thu, 14 Jul 2022 21:07:12 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=f3WlqpvPv3k">作業 with r7kamura #76 - YouTube</a></p><hr><p>RuboCopのSafeNavigationChainの違反を手作業で修正する機会が発生したので、autocorrectのサポートを入れられないかPRを出した。</p><hr><p>今日から新しいキーボードで作業しているが、Endキーが無いことにまだなれない。右Ctrlを使っていないので、これをEndキーに割り当ててもいいかもしれない。それから、運指がこれまで微妙だったせいもあり、ミスタイプが多い。特に . とか , の辺りのキー。このへんはしばらく意識的に訓練していく必要がありそう。</p><hr><p>RuboCopのchangelogは利用者が手作業で生成する仕組みになっているけど、github releasesのrelease noteをprが自動生成するやつで生成する仕組みに移行した方がhappyそうな気がしている。</p><hr><p>右CtrlとFn+HomeをEndに割り当ててみた。VIAのアプリをインストールして、なぜか自動的に認識はされなかったので公式からQ1 JIS用のJSONファイルをダウンロードしてimportすると上手く認識された。</p><hr><p>アビエイター付きのかわいいケーブルが欲しくなってきたので、適当に見繕う必要がある。黒色のキーボード筐体に似合いそうなやつを探しているけれど、他の人のキーボードを見てみると意外と白い筐体を使っている人が多いことに気付く。</p>
<p>ケーブルは黒色 + 銀のアビエイターだとださい感じになりそうなので、色付きのものが良さそうに思う。黒色にピンク字のキーキャップを注文したので、それに合わせて安めのピンク色のコイルケーブルを買ってみてもいいかもしれない。</p><hr><p>こういう画角にしたい</p>
<p><img src="https://user-images.githubusercontent.com/111689/179100388-c38b8848-83cb-49b8-b00f-c2847d836845.png" alt="image"></p>
<p><a href="https://www.youtube.com/watch?v=rj8Sp5tkVII">https://www.youtube.com/watch?v=rj8Sp5tkVII</a></p><hr><p>どうやらhamlcopを使っていてしかもpull requestをたまに送ってくれる人がいるらしく、めちゃくちゃ感謝している。実質自分はhamlcopを運用に載せられていない (改善に意欲的でhamlを使っているプロジェクトを抱えていない) ので、実際にまともに機能するかどうか自分では確かめられていないのだった。</p><hr><p><img src="https://user-images.githubusercontent.com/111689/179170008-1d9669a0-e696-4b34-9c5c-29bb819c898e.png" alt="image"></p>
<p>試しに似たような角度から撮ってみたがこんな感じ。自分の環境、画面とキーボードとの位置が、他の人々と比べてかなり近いのかもしれない？</p><hr><p><img src="https://user-images.githubusercontent.com/111689/179175192-1b81623a-d5a6-4194-b47b-b026c712be1b.png" alt="image"></p>
<p>マウスパッドを外してみた。</p><hr><p><img src="https://user-images.githubusercontent.com/111689/179205966-b2695175-9621-4871-9ff2-b37633d8b915.png" alt="image"></p>]]></content:encoded></item><item><title><![CDATA[2022-07-14]]></title><description><![CDATA[r7kamura's working log on 2022-07-14]]></description><link>https://r7kamura.github.io/diary/articles/70</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/70</guid><pubDate>Wed, 13 Jul 2022 21:09:50 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=1lhgdF2Xtt4">作業 with r7kamura #75 - YouTube</a></p><hr><p>打鍵している方が気持ちいいので、紙のメモから脱却したいという気持ちがあり、Chromeの新規タブをメモ帳にする拡張を見繕っている。エディタブ郎。</p>
<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Mozilla/Add-ons/WebExtensions/manifest.json/chrome_url_overrides">https://developer.mozilla.org/ja/docs/Mozilla/Add-ons/WebExtensions/manifest.json/chrome_url_overrides</a></li>
</ul>]]></content:encoded></item><item><title><![CDATA[2022-07-13]]></title><description><![CDATA[r7kamura's working log on 2022-07-13]]></description><link>https://r7kamura.github.io/diary/articles/69</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/69</guid><pubDate>Tue, 12 Jul 2022 21:03:14 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=G3MCB0H7cA4">作業 with r7kamura #74 - YouTube</a></p><hr><p>Lightroom Classicだと仮想コピーがあるが、Lightroomには無いらしい。残念</p><hr><p><a href="https://code.visualstudio.com/api/language-extensions/language-server-extension-guide">https://code.visualstudio.com/api/language-extensions/language-server-extension-guide</a></p>]]></content:encoded></item><item><title><![CDATA[2022-07-12]]></title><description><![CDATA[r7kamura's working log on 2022-07-12]]></description><link>https://r7kamura.github.io/diary/articles/68</link><guid isPermaLink="true">https://r7kamura.github.io/diary/articles/68</guid><pubDate>Tue, 12 Jul 2022 05:55:32 GMT</pubDate><content:encoded><![CDATA[<hr><p><a href="https://www.youtube.com/watch?v=OmmGWKrmDCo">作業 with r7kamura #73 - YouTube</a></p><hr><p>動画編集をした:
<a href="https://www.youtube.com/watch?v=HTuNoq9aEWQ">ASMR Coding - Custom Ruby linter with RuboCop - YouTube</a></p><hr><p>smart selectの対応に不満があるので、vscode-rubyのlanguage serverの実装を改善してみよう、ということになった。</p>]]></content:encoded></item></channel></rss>